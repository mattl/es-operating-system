// Generated by esidl 0.2.1.
// This file is expected to be modified for the Web IDL interface
// implementation.  Permission to use, copy, modify and distribute
// this file in any software license is hereby granted.

#ifndef ORG_W3C_DOM_BOOTSTRAP_CANVASRENDERINGCONTEXT2DIMP_H_INCLUDED
#define ORG_W3C_DOM_BOOTSTRAP_CANVASRENDERINGCONTEXT2DIMP_H_INCLUDED

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <org/w3c/dom/html/CanvasRenderingContext2D.h>

#include <org/w3c/dom/Element.h>
#include <org/w3c/dom/html/HTMLImageElement.h>
#include <org/w3c/dom/html/HTMLVideoElement.h>
#include <org/w3c/dom/html/HTMLCanvasElement.h>
#include <org/w3c/dom/html/CanvasGradient.h>
#include <org/w3c/dom/html/CanvasPattern.h>
#include <org/w3c/dom/html/TextMetrics.h>
#include <org/w3c/dom/html/ImageData.h>

namespace org
{
namespace w3c
{
namespace dom
{
namespace bootstrap
{
class CanvasRenderingContext2DImp : public ObjectMixin<CanvasRenderingContext2DImp>
{
public:
    // CanvasRenderingContext2D
    html::HTMLCanvasElement getCanvas();
    void save();
    void restore();
    void scale(double x, double y);
    void rotate(double angle);
    void translate(double x, double y);
    void transform(double a, double b, double c, double d, double e, double f);
    void setTransform(double a, double b, double c, double d, double e, double f);
    double getGlobalAlpha();
    void setGlobalAlpha(double globalAlpha);
    std::u16string getGlobalCompositeOperation();
    void setGlobalCompositeOperation(const std::u16string& globalCompositeOperation);
    Any getStrokeStyle();
    void setStrokeStyle(Any strokeStyle);
    Any getFillStyle();
    void setFillStyle(Any fillStyle);
    html::CanvasGradient createLinearGradient(double x0, double y0, double x1, double y1);
    html::CanvasGradient createRadialGradient(double x0, double y0, double r0, double x1, double y1, double r1);
    html::CanvasPattern createPattern(html::HTMLImageElement image, const std::u16string& repetition);
    html::CanvasPattern createPattern(html::HTMLCanvasElement image, const std::u16string& repetition);
    html::CanvasPattern createPattern(html::HTMLVideoElement image, const std::u16string& repetition);
    double getLineWidth();
    void setLineWidth(double lineWidth);
    std::u16string getLineCap();
    void setLineCap(const std::u16string& lineCap);
    std::u16string getLineJoin();
    void setLineJoin(const std::u16string& lineJoin);
    double getMiterLimit();
    void setMiterLimit(double miterLimit);
    double getShadowOffsetX();
    void setShadowOffsetX(double shadowOffsetX);
    double getShadowOffsetY();
    void setShadowOffsetY(double shadowOffsetY);
    double getShadowBlur();
    void setShadowBlur(double shadowBlur);
    std::u16string getShadowColor();
    void setShadowColor(const std::u16string& shadowColor);
    void clearRect(double x, double y, double w, double h);
    void fillRect(double x, double y, double w, double h);
    void strokeRect(double x, double y, double w, double h);
    void beginPath();
    void closePath();
    void moveTo(double x, double y);
    void lineTo(double x, double y);
    void quadraticCurveTo(double cpx, double cpy, double x, double y);
    void bezierCurveTo(double cp1x, double cp1y, double cp2x, double cp2y, double x, double y);
    void arcTo(double x1, double y1, double x2, double y2, double radius);
    void rect(double x, double y, double w, double h);
    void arc(double x, double y, double radius, double startAngle, double endAngle);
    void arc(double x, double y, double radius, double startAngle, double endAngle, bool anticlockwise);
    void fill();
    void stroke();
    void drawSystemFocusRing(Element element);
    bool drawCustomFocusRing(Element element);
    void scrollPathIntoView();
    void clip();
    bool isPointInPath(double x, double y);
    std::u16string getFont();
    void setFont(const std::u16string& font);
    std::u16string getTextAlign();
    void setTextAlign(const std::u16string& textAlign);
    std::u16string getTextBaseline();
    void setTextBaseline(const std::u16string& textBaseline);
    void fillText(const std::u16string& text, double x, double y);
    void fillText(const std::u16string& text, double x, double y, double maxWidth);
    void strokeText(const std::u16string& text, double x, double y);
    void strokeText(const std::u16string& text, double x, double y, double maxWidth);
    html::TextMetrics measureText(const std::u16string& text);
    void drawImage(html::HTMLImageElement image, double dx, double dy);
    void drawImage(html::HTMLImageElement image, double dx, double dy, double dw, double dh);
    void drawImage(html::HTMLImageElement image, double sx, double sy, double sw, double sh, double dx, double dy, double dw, double dh);
    void drawImage(html::HTMLCanvasElement image, double dx, double dy);
    void drawImage(html::HTMLCanvasElement image, double dx, double dy, double dw, double dh);
    void drawImage(html::HTMLCanvasElement image, double sx, double sy, double sw, double sh, double dx, double dy, double dw, double dh);
    void drawImage(html::HTMLVideoElement image, double dx, double dy);
    void drawImage(html::HTMLVideoElement image, double dx, double dy, double dw, double dh);
    void drawImage(html::HTMLVideoElement image, double sx, double sy, double sw, double sh, double dx, double dy, double dw, double dh);
    html::ImageData createImageData(double sw, double sh);
    html::ImageData createImageData(html::ImageData imagedata);
    html::ImageData getImageData(double sx, double sy, double sw, double sh);
    void putImageData(html::ImageData imagedata, double dx, double dy);
    void putImageData(html::ImageData imagedata, double dx, double dy, double dirtyX, double dirtyY, double dirtyWidth, double dirtyHeight);
    // Object
    virtual Any message_(uint32_t selector, const char* id, int argc, Any* argv)
    {
        return html::CanvasRenderingContext2D::dispatch(this, selector, id, argc, argv);
    }
    static const char* const getMetaData()
    {
        return html::CanvasRenderingContext2D::getMetaData();
    }
};

}
}
}
}

#endif  // ORG_W3C_DOM_BOOTSTRAP_CANVASRENDERINGCONTEXT2DIMP_H_INCLUDED

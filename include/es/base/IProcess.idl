/*
 * Copyright (c) 2006
 * Nintendo Co., Ltd.
 *
 * Permission to use, copy, modify, distribute and sell this software
 * and its documentation for any purpose is hereby granted without fee,
 * provided that the above copyright notice appear in all copies and
 * that both that copyright notice and this permission notice appear
 * in supporting documentation.  Nintendo makes no
 * representations about the suitability of this software for any
 * purpose.  It is provided "as is" without express or implied warranty.
 */

import "es/base/ICallback.idl", "es/base/IFile.idl", "es/base/IPageable.idl", "es/base/IThread.idl", "es/base/IMonitor.idl", "es/naming/IContext.idl";

/** This interface provides methods for handling child processes of the current process.
 */
[object, uuid(0328e552-25db-11db-9c02-0009bf000001)]
interface IProcess : IInterface
{
    /**
     * Kills this process.
     */
    void kill();
    /**
     * Starts this process.
     */
    void start();
    /**
     * Starts this process, which executes a program <code>file</code>.
     * @param file an executable file.
     */
    void start(IFile* file);
    /**
     * Starts this process, which executes a program <code>file</code> with arguments.
     * @param file an executable file.
     * @param arguments arguments to be passed to the program.
     */
    void start(IFile* file, [in] char* arguments);
    /**
     * Waits until this process is complete.
     */
    int wait();
    /**
     * Gets the exit value of this process.
     * @return the exit value.
     */
    int getExitValue();
    /**
     * Tests whether this process has exited.
     * @return true if this process has exited. Otherwise, false.
     */
    boolean hasExited();
    /**
     * Sets the root of the namespace for this process.
     * @param root a namespace.
     */
    void setRoot(IContext* root);
    /**
     * Sets the standard input for this process.
     * @param input an input stream.
     */
    void setIn(IStream* input);
    /**
     * Sets the standard output for this process.
     * @param output an output stream.
     */
    void setOut(IStream* output);
    /**
     * Sets the standard error for this process.
     * @param error an output stream.
     */
    void setError(IStream* error);
}

/** This interface provides methods for handling the current process.
 */
[object, uuid(765edc68-41f9-11db-9c02-0009bf000001)]
interface ICurrentProcess : IInterface
{
    const unsigned int PROT_NONE = 0x0;
    const unsigned int PROT_READ = 0x1;
    const unsigned int PROT_WRITE = 0x2;
    const unsigned int PROT_EXEC = 0x4;
    const unsigned int MAP_SHARED = 0x01;
    const unsigned int MAP_PRIVATE = 0x02;
    const unsigned int MAP_FIXED = 0x10;

    /** Terminates the currently running process.
     */
    void exit(int status);

    /**
     * Maps the pageable object into memory.
     * @param start the preferable address to start mapping (usually 0).
     * @param length the mapping size.
     * @param prot <code>PROT_*</code> flags.
     * @param flags <code>MAP_*</code> flags.
     * @param pageable a pageable object to be mapped.
     * @param offset the start offset of <code>pageable</code>.
     * @return the address of the mapping.
     */
    void* map([in] void* start, long length, unsigned int prot, unsigned int flags,
              IPageable* pageable, long offset);

    /**
     * Deletes the mappings.
     * @param start the address of the mapping.
     * @param length the size of the mapping.
     */
    void unmap([in] void* start, long length);

    /** Returns the currently executing thread.
     */
    ICurrentThread* currentThread();

    /** Creates and returns a new thread.
     * @return          a new thread.
     * @param start     the function to be started in a new thread.
     * @param param     the argument to be passed to <code>start</code>.
     * @see IThread
     */
    IThread* createThread(void* (*start)(void* param), void* param);

    /** Causes the currently executing thread to temporarily pause
     * and allow other threads to execute.
     */
    void yield();

    /** Creates and returns an unlocked monitor.
     * @return          an unlocked monitor.
     * @see IMonitor
     */
    IMonitor* createMonitor();

    /**
     * Gets the root of the namespace.
     * @return the root of the namespace.
     */
    IContext* getRoot();

    /**
     * Gets the standard input.
     * @return the standard input stream.
     */
    IStream* getIn();
    /**
     * Gets the standard output.
     * @return the standard output stream.
     */
    IStream* getOut();
    /**
     * Gets the standard error.
     * @return the standard error output stream.
     */
    IStream* getError();

    /**
     * Increments the program data space.
     * @param increment the increment size in bytes.
     */
    void* setBreak(long increment);

    /**
     * Gets the current time.
     */
    long getNow();

    /**
     * Traces the system call invocation.
     * @param on    enable/disable trace.
     */
    boolean trace(boolean on);
}

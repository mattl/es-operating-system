/*
 * Copyright (c) 2006
 * Nintendo Co., Ltd.
 *
 * Permission to use, copy, modify, distribute and sell this software
 * and its documentation for any purpose is hereby granted without fee,
 * provided that the above copyright notice appear in all copies and
 * that both that copyright notice and this permission notice appear
 * in supporting documentation.  Nintendo makes no
 * representations about the suitability of this software for any
 * purpose.  It is provided "as is" without express or implied warranty.
 */

import "es/base/ICallback.idl";

/**
 * This interface provides a timer
 * which issues the specified callback function after a specified delay.
 */
[object, uuid(032000e0-25db-11db-9c02-0009bf000001)]
interface IAlarm : IInterface
{
    /**
     * Gets the interval from when this alarm starts till when it fires.
     * @param interval the interval.
     */
    void getInterval(long& interval);
    /**
     * Gets the time when this alarm starts.
     * @param time the start time.
     */
    void getStartTime(long& time);
    /**
     * Tests whether this alarm is enabled.
     * @return true if this alarm is enabled. Otherwise, false.
     */
    boolean isEnabled();
    /**
     * Tests whether this alarm is periodic.
     * @return true if this alarm is periodic. Otherwise, false.
     */
    boolean isPeriodic();
    /**
     * Sets a callback function which is called when this alarm fires.
     * @param callback the callback function.
     */
    void setCallback(ICallback* callback);
    /**
     * Enables or disables this alarm.
     * @param enabled this alarm is enabled if <code>enebled</code> is true.
     * This alarm is disabled if <code>enebled</code> is false.
     */
    void setEnabled(boolean enabled);
    /**
     * Sets this alarm to fire once or periodically.
     * @param periodic this alarm is set to fire periodically if <code>periodic</code> is true.
     * This alarm fires once if <code>periodic</code> is false.
     */
    void setPeriodic(boolean periodic);
    /**
     * Sets delay before this alarm fires.
     * @param interval the interval from when this alarm starts till when it fires.
     */
    void setInterval(long interval);
    /**
     * Sets the time when this alarm starts.
     * @param time the time when this alarm starts.
     */
    void setStartTime(long time);
}

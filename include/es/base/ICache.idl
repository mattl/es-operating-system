/*
 * Copyright (c) 2006
 * Nintendo Co., Ltd.
 *
 * Permission to use, copy, modify, distribute and sell this software
 * and its documentation for any purpose is hereby granted without fee,
 * provided that the above copyright notice appear in all copies and
 * that both that copyright notice and this permission notice appear
 * in supporting documentation.  Nintendo makes no
 * representations about the suitability of this software for any
 * purpose.  It is provided "as is" without express or implied warranty.
 */

import "es/base/IStream.idl", "es/base/IPageSet.idl";

/**
 * This interface provides methods for handling a cache
 * that is a block of memory for temporary storage.
 */
[object, uuid(03212600-25db-11db-9c02-0009bf000001)]
interface ICache : IInterface
{
    /** Creates a new stream for this cache.
     * @return  IStream interface pointer.
     */
    IStream* getStream();
    /** Creates a new input stream for this cache.
     * @return  IStream interface pointer.
     */
    IStream* getInputStream();
    /** Creates a new output stream for this cache.
     * @return  IStream interface pointer.
     */
    IStream* getOutputStream();

    /** Gets the size of this cache.
     * @return the size of this cache.
     */
    long getSize();

    /** Resizes this cache.
     * @param size the new size of this cache.
     */
    void setSize(long size);

    /** Gets the size of a sector in this cache.
     * @param size the sector size.
     */
    void getSectorSize([out] int& size);

    /** Changes the size of a sector in this cache.
     * @param size the new sector size.
     */
    void setSectorSize(int size);

    /**
     * Forces all pending data to be written out.
     */
    void flush();

    /** Releases all the changed pages associated with this cache
     * without flushing them.
     */
    void invalidate();

    /** Gets the number of pages associated to this cache.
     * @return  page count
     */
    unsigned long getPageCount();
}


/**
 *  This interface provides methods to create caches and associate them with page sets.
 */
[object, uuid(03220a48-25db-11db-9c02-0009bf000001)]
interface ICacheFactory : IInterface
{
    /** Creates a new cache.
     */
    ICache* create(IStream* backingStore);

    /** Creates a new cache associated with the specified pageSet.
     */
    ICache* create(IStream* backingStore, IPageSet* pageSet);
}

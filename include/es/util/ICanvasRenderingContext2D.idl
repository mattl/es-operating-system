/*
 * Copyright 2008 Google Inc.
 * Copyright 2006, 2007 Nintendo Co., Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef NINTENDO_ES_UTIL_ICANVASRENDERINGCONTEXT2D_IDL_INCLUDED
#define NINTENDO_ES_UTIL_ICANVASRENDERINGCONTEXT2D_IDL_INCLUDED

module es
{
    /**
     */
    interface CanvasGradient
    {
        #pragma ID CanvasGradient = "DCE:f45e927e-46fe-11dd-8100-0009bf000001";
        // opaque object
        void addColorStop(in float offset, in string color);
    };

    /**
     */
    interface CanvasPattern
    {
        #pragma ID CanvasPattern = "DCE:f323a595-46fe-11dd-8100-0009bf000001";
        // opaque object
    };

    /**
     * This interface provides methods for handling
     * a script rendering bitmap images.
     */
    interface CanvasRenderingContext2D
    {
        #pragma ID CanvasRenderingContext2D = "DCE:f49e00dd-46fe-11dd-8100-0009bf000001";

        // state
        void save(); // push state on state stack
        void restore(); // pop state stack and restore state

        // transformations (default transform is the identity matrix)
        void scale(in float x, in float y);
        void rotate(in float angle);
        void translate(in float x, in float y);
        // void transform(in float m11, in float m12, in float m21, in float m22, in float dx, in float dy);
        // void setTransform(in float m11, in float m12, in float m21, in float m22, in float dx, in float dy);

        // compositing
        attribute float globalAlpha;
        attribute string globalCompositeOperation;

        // colors and styles
        attribute any strokeStyle;  // (default black)
        attribute any fillStyle;  // (default black)
        CanvasGradient createLinearGradient(in float x0, in float y0, in float x1, in float y1);
        CanvasGradient createRadialGradient(in float x0, in float y0, in float r0, in float x1, in float y1, in float r1);
        // CanvasPattern createPattern(in HTMLImageElement image, in DOMString repetition);
        // CanvasPattern createPattern(in HTMLCanvasElement image, in DOMString repetition);

        // line caps/joins
        attribute float lineWidth; // (default 1)
        attribute string lineCap; // "butt", "round", "square" (default "butt")
        attribute string lineJoin; // "round", "bevel", "miter" (default "miter")
        attribute float miterLimit; // (default 10)

        // Shadow
        attribute float shadowOffsetX; // (default 0)
        attribute float shadowOffsetY; // (default 0)
        attribute float shadowBlur; // (default 0)
        attribute string shadowColor; // (default transparent black)

        // rects
        void clearRect(in float x, in float y, in float width, in float height);
        void fillRect(in float x, in float y, in float width, in float height);
        void strokeRect(in float x, in float y, in float width, in float height);

        // path API
        void beginPath();
        void closePath();
        void moveTo(in float x, in float y);
        void lineTo(in float x, in float y);
        void quadraticCurveTo(in float cpx, in float cpy, in float x, in float y);
        void bezierCurveTo(in float cp1x, in float cp1y, in float cp2x, in float cp2y, in float x, in float y);
        void arcTo(in float x1, in float y1, in float x2, in float y2, in float radius); // [check]
        void rect(in float x, in float y, in float width, in float height);
        void arc(in float x, in float y, in float radius, in float startAngle, in float endAngle, in boolean anticlockwise);
        void fill();
        void stroke();
        void clip();
        boolean isPointInPath(in float x, in float y);

        // Text (drawString enhancement as in mozilla1.9 M7)
        attribute string mozTextStyle;
        void mozDrawText(in string textToDraw);
        float mozMeasureText(in string textToMeasure);
        void mozPathText(in string textToPath);
        void mozTextAlongPath(in string textToDraw, in boolean stroke);
    };
};

#endif // NINTENDO_ES_UTIL_ICANVASRENDERINGCONTEXT2D_IDL_INCLUDED


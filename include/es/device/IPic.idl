/*
 * Copyright (c) 2006, 2007
 * Nintendo Co., Ltd.
 *
 * Permission to use, copy, modify, distribute and sell this software
 * and its documentation for any purpose is hereby granted without fee,
 * provided that the above copyright notice appear in all copies and
 * that both that copyright notice and this permission notice appear
 * in supporting documentation.  Nintendo makes no
 * representations about the suitability of this software for any
 * purpose.  It is provided "as is" without express or implied warranty.
 */

#ifndef NINTENDO_ES_DEVICE_IPIC_IDL_INCLUDED
#define NINTENDO_ES_DEVICE_IPIC_IDL_INCLUDED

#include "es/base/IInterface.idl"

module es
{
    /** This interface represents operations of a programmable interrupt controller.
     */
    interface IPic : IInterface
    {
        #pragma ID IPic = "DCE:c631e302-f14e-11db-9c02-0009bf000001";

        /** Starts the specified IRQ.
         * @param bus   the bus.
         * @param irq   the IRQ.
         * @return the interrupt vector for the interrupt request line.
         */
        long startup(in unsigned long bus, in unsigned long irq);

        /** Stops the specified IRQ.
         * @param bus   the bus.
         * @param irq   the IRQ.
         * @return the interrupt vector for the interrupt request line.
         */
        long shutdown(in unsigned long bus, in unsigned long irq);

        /** Enables the specified IRQ.
         * @param bus   the bus.
         * @param irq   the IRQ.
         * @return the interrupt vector for the interrupt request line.
         */
        long enable(in unsigned long bus, in unsigned long irq);

        /** Disables the specified IRQ.
         * @param bus   the bus.
         * @param irq   the IRQ.
         * @return the interrupt vector for the interrupt request line.
         */
        long disable(in unsigned long bus, in unsigned long irq);

        /** Acknowledges the received IRQ.
         * @param vec   the interrupt vector.
         */
        boolean ack(in long vec);

        /** Completes the acknowledged IRQ handling.
         * @param vec   the interrupt vector.
         */
        boolean end(in long vec);

        /** Sets the affinity of the specified IRQ to the specific CPUs.
         * @param bus   the bus.
         * @param irq   the IRQ.
         * @param mask  the set of processors.
         * @return the interrupt vector for the interrupt request line.
         */
        long setAffinity(in unsigned long bus, in unsigned long irq, in unsigned long mask);

        /** Sets the processor execution level to "idle".
         *  The current processor will handle all interrupts.
         * @return the previous execution level.
         */
        unsigned long splIdle();

        /** Sets the processor execution level to "low".
         *  The current processor can handle all interrupts but it has a
         *  higher priority than an "idle" processor.
         * @return the previous execution level.
         */
        unsigned long splLo();

        /** Sets the processor execution level to "high".
         *  All interrupts are inhibited from being handled.
         * @return the previous execution level.
         */
        unsigned long splHi();

        /** Sets the processor execution level to the specified value
         * @param x the execution level returned from splIdle, splLo, or splHi.
         */
        void splX(in unsigned long x);
    };
};

#endif // NINTENDO_ES_DEVICE_IPIC_IDL_INCLUDED


/*
 * Copyright (c) 2006, 2007
 * Nintendo Co., Ltd.
 *
 * Permission to use, copy, modify, distribute and sell this software
 * and its documentation for any purpose is hereby granted without fee,
 * provided that the above copyright notice appear in all copies and
 * that both that copyright notice and this permission notice appear
 * in supporting documentation.  Nintendo makes no
 * representations about the suitability of this software for any
 * purpose.  It is provided "as is" without express or implied warranty.
 */

import "es/base/IInterface.idl";

/** This interface represents operations of a programmable interrupt controller.
 */
[object, uuid(c631e302-f14e-11db-9c02-0009bf000001)]
interface IPic : IInterface
{
    /** Starts the specified IRQ.
     * @param bus   the bus.
     * @param irq   the IRQ.
     * @return the interrupt vector for the interrupt request line.
     */
    int startup(unsigned int bus, unsigned int irq);

    /** Stops the specified IRQ.
     * @param bus   the bus.
     * @param irq   the IRQ.
     * @return the interrupt vector for the interrupt request line.
     */
    int shutdown(unsigned int bus, unsigned int irq);

    /** Enables the specified IRQ.
     * @param bus   the bus.
     * @param irq   the IRQ.
     * @return the interrupt vector for the interrupt request line.
     */
    int enable(unsigned int bus, unsigned int irq);

    /** Disables the specified IRQ.
     * @param bus   the bus.
     * @param irq   the IRQ.
     * @return the interrupt vector for the interrupt request line.
     */
    int disable(unsigned int bus, unsigned int irq);

    /** Acknowledges the received IRQ.
     * @param vec   the interrupt vector.
     */
    boolean ack(int vec);

    /** Completes the acknowledged IRQ handling.
     * @param vec   the interrupt vector.
     */
    boolean end(int vec);

    /** Sets the affinity of the specified IRQ to the specific CPUs.
     * @param bus   the bus.
     * @param irq   the IRQ.
     * @param mask  the set of processors.
     * @return the interrupt vector for the interrupt request line.
     */
    int setAffinity(unsigned int bus, unsigned int irq, unsigned int mask);

    /** Sets the processor execution level to "idle".
     *  The current processor will handle all interrupts.
     * @return the previous execution level.
     */
    unsigned int splIdle();

    /** Sets the processor execution level to "low".
     *  The current processor can handle all interrupts but it has a
     *  higher priority than an "idle" processor.
     * @return the previous execution level.
     */
    unsigned int splLo();

    /** Sets the processor execution level to "high".
     *  All interrupts are inhibited from being handled.
     * @return the previous execution level.
     */
    unsigned int splHi();

    /** Sets the processor execution level to the specified value
     * @param x the execution level returned from splIdle, splLo, or splHi.
     */
    void splX(unsigned int x);
}

/*
 * Copyright (c) 2006, 2007
 * Nintendo Co., Ltd.
 *
 * Permission to use, copy, modify, distribute and sell this software
 * and its documentation for any purpose is hereby granted without fee,
 * provided that the above copyright notice appear in all copies and
 * that both that copyright notice and this permission notice appear
 * in supporting documentation.  Nintendo makes no
 * representations about the suitability of this software for any
 * purpose.  It is provided "as is" without express or implied warranty.
 */

import "es/util/IIterator.idl", "es/naming/IBinding.idl";

/** This interface represents a naming context, which consists of a set
 * of name-to-object bindings. It contains methods for examining and
 * updating these bindings.
 */
[object, uuid(33f8180a-25dc-11db-9c02-0009bf000001)]
interface IContext : IInterface
{
    /** Binds a name to an object.
     * @param name      The name to bind.
     * @param obj       The object to bind.
     */
    IBinding* bind([in] char* name, IInterface* element);

    /** Creates a new context.
     * @param name      The name of the context to create.
     */
    IContext* createSubcontext([in] char* name);

    /** Removes the named context.
     * @param name      The name of the context to be destroyed.
     */
    int destroySubcontext([in] char* name);

    /** Retrieves the named object.
     * @param name      The name of the object to look up.
     * @return          The object bound to <code>name</code>.
     */
    IInterface* lookup([in] char* name);

    /** Binds a new name to the object bound to an old name, and unbinds
     * the old name.
     * @param oldName   The name of the existing binding.
     * @param newName   The name of the new binding.
     */
    int rename([in] char* oldName, [in] char* newName);

    /** Unbinds the named object.
     * @param name      The name to unbind; may not be empty.
     */
    int unbind([in] char* name);

    /** Enumerates the names bound in the named context, along with the
     * objects bound to them.
     * @param name      The name of the context to list.
     * @return          An iterator of the name-to-object bindings in this
     *                  context. Each element of the iterator is of type
     *                  <code>IBinding</code>.
     */
    IIterator* list([in] char* name);
}

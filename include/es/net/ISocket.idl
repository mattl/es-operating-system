/*
 * Copyright (c) 2006, 2007
 * Nintendo Co., Ltd.
 *
 * Permission to use, copy, modify, distribute and sell this software
 * and its documentation for any purpose is hereby granted without fee,
 * provided that the above copyright notice appear in all copies and
 * that both that copyright notice and this permission notice appear
 * in supporting documentation.  Nintendo makes no
 * representations about the suitability of this software for any
 * purpose.  It is provided "as is" without express or implied warranty.
 */

import "es/net/IInternetAddress.idl";

/**
 * This interface represents a socket.
 */
[object, uuid(2f2ea026-d137-11db-9c02-0009bf000001)]
interface ISocket : IInterface
{
    // socket type
    const int Stream = 1;
    const int Datagram = 2;
    const int Raw = 3;

    /** Extracts the first connection on the queue of pending connections,
     * creates a new socket with the same socket type,
     * protocol and address family as the specified socket.
     * The original socket remains open for further connection requests.
     * @return a new socket.
     */
    ISocket* accept();

    /** Assigns the specified local internet address and the specified port to this socket that
     *  has no local socket address assigned.
     * @param addr the internet address to be assigned.
     * @param port the port number.
     */
    void bind(IInternetAddress* addr, int port);

    /** Closes this socket.
     */
    void close();

    /** Attempts to make a connection to the specified server on this socket.
     * If this socket has not already been bound to a local address,
     * <code>connect</code> binds it to an address which is unused and local.
     * @param addr the internet address of the server
     * @param port the port number of the server.
     */
    void connect(IInternetAddress* addr, int port);

    /** Gets the address family of this socket.
     * @retern the address family.
     */
    int getAddressFamily();

    /** Gets maximum number of hops allowed for packets to be sent from this socket.
     * @return maximum number of hops.
     */
    int getHops();

    /** Gets the local address to which this socket is bound.
     * @return the local internet address.
     */
    IInternetAddress* getLocalAddress();

    /** Returns the last error code of this socket.
     * @return the last error code.
     */
    int getLastError();

    /** Gets the local port to which this socket is bound.
     * @return the local port number.
     */
    int getLocalPort();

    /** Gets the protocol of this socket.
     * @return the protocol value.
     */
    int getProtocolType();

    /** Gets the receive buffer size of this socket.
     * @return the receive buffer size.
     */
    int getReceiveBufferSize();

    /** Gets the remote internet address to which this socket is connected.
     * @return the remote internet address.
     */
    IInternetAddress* getRemoteAddress();

    /** Gets the remote port to which this socket is connected.
     * @return the port number.
     */
    int getRemotePort();

    /** Gets the send buffer size of this socket.
     * @return the send buffer size.
     */
    int getSendBufferSize();

    /** Gets the type of this socket.
     * @return the remote socket type.
     */
    int getSocketType();

    /** Gets the timeout setting of this socket.
     * A timeout of zero implies an infinite timeout.
     * @return the timeout value in 100-nanosecond units.
     */
    long getTimeout();

    /** Tests whether this socket is ready to accept a new connection.
     * @return true if a new connection is acceptable.
     */
    boolean isAcceptable();

    /** Gets the blocking option of this socket.
     * By default, this option is enabled.
     * @return  whether the blocking option is enabled or not.
     */
    boolean isBlocking();

    /** Tests whether this socket bound to an internet address.
     * @return true if this socket bound to an internet address.
     */
    boolean isBound();

    /** Tests whether this socket has been closed.
     * @return true if this socket has been closed.
     */
    boolean isClosed();

    /** Tests whether this socket has completed the connect operation, either finished or failed.
     * @return true if the connect operation has been completed.
     */
    boolean isConnectable();

    /** Tests whether this socket has been connected.
     * @return true if this socket has been connected.
     */
    boolean isConnected();

    /** Tests whether this socket is ready for reading
     * @return true if this socket is readable.
     */
    boolean isReadable();

    /** Gets the reuse address option of this socket.
     * By default, this option is disabled.
     * @return  whether the reuse address is enabled or not.
     */
    boolean isReuseAddress();

    /** Tests whether this socket is ready for writing
     * @return true if this socket is writable.
     */
    boolean isWritable();

    /** Enables the connection-mode socket to accept connections.
     * @param backlog The maximum number of pending connections in the socket's listen backlog queue.
     * If <code>backlog</code> is less than or equal to zero, backlog is set to one.
     */
    void listen(int backlog);

    /** Wakes up threads that are waiting on this socket.
     */
    void notify();

    /** Attempt to read the specified bytes of data from the other end of this socket.
     * @param dst   the receive buffer.
     * @param count the number of bytes of the receive buffer.
     * @return the number of bytes received in the buffer.
     */
    int read([out, size_is(count)] void* dst, int count);

    /** Attempt to read the specified bytes of data from the other end of this socket and stores the internet address and port of the source.
     * @param dst   the receive buffer.
     * @param count the number of bytes of the receive buffer.
     * @param flag  the flag which specifies the type of message reception.
     * @param addr  the internet address of the peer.
     * @param port  the port number of the peer.
     * @return the number of bytes received in the buffer.
     */
    int recvFrom([out, size_is(count)] void* dst, int count, int flags, [out] IInternetAddress** addr, [out] int* port);

    /** Sends a message to the specified destination through this socket.
     * @param src   the buffer containing the message to send.
     * @param count the length of the message to be sent in bytes.
     * @param flags the type of message transmission.
     * @param addr  the internet address of the destination.
     * @param port  the port number of the destination.
     * @return      the number of bytes sent.
     */
    int sendTo([in, size_is(count)] void* src, int count, int flags, IInternetAddress* addr, int port);

    /** Sets the blocking option of this socket.
     * By default, this option is enabled.
     * @param on    whether to enable or disable the blocking option.
     */
    void setBlocking(boolean on);

    /** Sets maximum number of hops allowed for packets to be sent from this socket.
     * @param limit maximum number of hops.
     */
    void setHops(int limit);

    /** Sets the receive buffer size of this socket.
     * @param size  the receive buffer size.
     */
    void setReceiveBufferSize(int size);

    /** Sets the reuse address option of this socket.
     * By default, this option is disabled.
     * @param on    whether to enable or disable the reuse address option.
     */
    void setReuseAddress(boolean on);

    /** Sets the send buffer size of this socket.
     * @param size  the send buffer size.
     */
    void setSendBufferSize(int size);

    /** Sets the timeout setting of this socket.
     * A timeout of zero implies an infinite timeout.
     * @param timeSpan the timeout value in 100-nanosecond units.
     */
    void setTimeout(long timeSpan);

    /** Disables read-half of this socket connection.
     * Any data sent to the input side of this socket is discarded
     */
    void shutdownInput();

    /** Disables write-half of this socket connection.
     */
    void shutdownOutput();

    /** Sends a message through this socket.
     * @param src   the buffer containing the message to send.
     * @param count the length of the message to be sent in bytes.
     * @return      the number of bytes sent.
     */
    int write([in, size_is(count)] void* src, int count);
}

/**
 * This interface represents a stream socket.
 */
[object, uuid(bed398d0-9fa5-11db-8100-0009bf000001)]
interface IStreamSocket : ISocket
{
    int getLinger();
    int getMaxSegmentSize();
    boolean isNoDelay();
    boolean isOOBInline();
    boolean isStandardURG();
    void sendUrgentData(byte data);
    void setLinger(int linger);
    void setMaxSegmentSize(int size);
    void setNoDelay(boolean on);
    void setOOBInline(boolean on);
    void setStandardURG(boolean on);
}

/**
 * This interface represents a multicast socket.
 */
[object, uuid(bf5985a8-9fa5-11db-8100-0009bf000001)]
interface IMulticastSocket : ISocket
{
    int getLoopbackMode();
    void setLoopbackMode(boolean disable);

    void joinGroup(IInternetAddress* addr);
    void leaveGroup(IInternetAddress* addr);
}

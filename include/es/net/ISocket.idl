/*
 * Copyright 2008, 2009 Google Inc.
 * Copyright 2006, 2007 Nintendo Co., Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef NINTENDO_ES_NET_ISOCKET_IDL_INCLUDED
#define NINTENDO_ES_NET_ISOCKET_IDL_INCLUDED

#include "es/net/IInternetAddress.idl"

module es
{
    /**
     * This interface represents a socket.
     */
    interface Socket
    {
        // socket type
        const long Stream = 1;
        const long Datagram = 2;
        const long Raw = 3;
	
	// flags to sendTo and recvFrom methods
	const long MsgOob = 1;

        /** Extracts the first connection on the queue of pending connections,
         * creates a new socket with the same socket type,
         * protocol and address family as the specified socket.
         * The original socket remains open for further connection requests.
         * @return a new socket.
         */
        Socket accept();

        /** Assigns the specified local internet address and the specified port to this socket that
         *  has no local socket address assigned.
         * @param addr the internet address to be assigned.
         * @param port the port number.
         */
        void bind(in InternetAddress addr, in long port);

        /** Closes this socket.
         */
        void close();

        /** Attempts to make a connection to the specified server on this socket.
         * If this socket has not already been bound to a local address,
         * <code>connect</code> binds it to an address which is unused and local.
         * @param addr the internet address of the server
         * @param port the port number of the server.
         */
        void connect(in InternetAddress addr, in long port);

        /** Enables the connection-mode socket to accept connections.
         * @param backlog The maximum number of pending connections in the socket's listen backlog queue.
         * If <code>backlog</code> is less than or equal to zero, backlog is set to one.
         */
        void listen(in long backlog);

        /** Wakes up threads that are waiting on this socket.
         */
        void notify();

        /** Attempt to read the specified bytes of data from the other end of this socket.
         * @param buf   the receive buffer.
         * @param bufLength the number of bytes of the receive buffer.
         * @return the number of bytes received in the buffer.
         */
        sequence<octet> read();

        /** Attempt to read the specified bytes of data from the other end of this socket and stores the internet address and port of the source.
         * @param dst   the receive buffer.
         * @param count the number of bytes of the receive buffer.
         * @param flag  the flag which specifies the type of message reception.
         * @param addr  the internet address of the peer.
         * @param port  the port number of the peer.
         * @return the number of bytes received in the buffer.
         */
        sequence<octet> recvFrom(in long flags);
        readonly attribute InternetAddress recvFromAddress;
        readonly attribute long recvFromPort;

        /** Sends a message to the specified destination through this socket.
         * @param src   the buffer containing the message to send.
         * @param srcLength the length of the message to be sent in bytes.
         * @param flags the type of message transmission.
         * @param addr  the internet address of the destination.
         * @param port  the port number of the destination.
         * @return      the number of bytes sent.
         */
        long sendTo(in sequence<octet> src, in long flags, in InternetAddress addr, in long port);

        /** Disables read-half of this socket connection.
         * Any data sent to the input side of this socket is discarded
         */
        void shutdownInput();

        /** Disables write-half of this socket connection.
         */
        void shutdownOutput();

        /** Sends a message through this socket.
         * @param src   the buffer containing the message to send.
         * @param count the length of the message to be sent in bytes.
         * @return      the number of bytes sent.
         */
        long write(in sequence<octet> src);

        /** Boolean whether this socket is ready to accept a new connection.
         */
        boolean isAcceptable();

        /** The address family of this socket.
         */
        readonly attribute long addressFamily;

        /** Boolean whether this socket bound to an internet address.
         */
        boolean isBound();

        /** Boolean whether this socket has been closed.
         */
        boolean isClosed();

        /** Boolean whether this socket has completed the connect operation, either finished or failed.
         */
        boolean isConnectable();

        /** Boolean whether this socket has been connected.
         */
        boolean isConnected();

        /** The last error code of this socket.
         */
        readonly attribute long lastError;

        /** The local address to which this socket is bound.
         */
        readonly attribute InternetAddress localAddress;

        /** The local port to which this socket is bound.
         */
        readonly attribute long localPort;

        /** The protocol of this socket.
         */
        readonly attribute long protocolType;

        /** Boolean whether this socket is ready for reading
         */
        boolean isReadable();

        /** The remote internet address to which this socket is connected.
         */
        readonly attribute InternetAddress remoteAddress;

        /** The remote port to which this socket is connected.
         */
        readonly attribute long remotePort;

        /** The type of this socket.
         */
        readonly attribute long socketType;

	/** Boolean whether the stream delivers an urgent byte next
         */        
	boolean sockAtMark();

        /** Boolean whether this socket is ready for writing
         */
        boolean isWritable();

        /** The blocking option of this socket.
         * By default, this option is enabled.
         */
        attribute boolean blocking;

        /** Maximum number of hops allowed for packets to be sent from this socket.
         */
        attribute long hops;

        /** The receive buffer size of this socket.
         */
        attribute long receiveBufferSize;

        /** The reuse address option of this socket.
         * By default, this option is disabled.
         */
        attribute boolean reuseAddress;

        /** The send buffer size of this socket.
         */
        attribute long sendBufferSize;

        /** The timeout setting of this socket.
         * A timeout of zero implies an infinite timeout.
         */
        attribute long long timeout;
    };

    /**
     * This interface represents a stream socket.
     */
    interface StreamSocket : Socket
    {
        void sendUrgentData(in octet data);

        attribute long linger;
        attribute long maxSegmentSize;
        attribute boolean noDelay;
        attribute boolean oOBInline;
        attribute boolean standardURG;
    };

    /**
     * This interface represents a multicast socket.
     */
    interface MulticastSocket : Socket
    {
        void joinGroup(in InternetAddress addr);
        void leaveGroup(in InternetAddress addr);

        attribute boolean loopbackMode;
    };
};

#endif // NINTENDO_ES_NET_ISOCKET_IDL_INCLUDED


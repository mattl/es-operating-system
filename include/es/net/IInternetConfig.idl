/*
 * Copyright (c) 2006, 2007
 * Nintendo Co., Ltd.
 *
 * Permission to use, copy, modify, distribute and sell this software
 * and its documentation for any purpose is hereby granted without fee,
 * provided that the above copyright notice appear in all copies and
 * that both that copyright notice and this permission notice appear
 * in supporting documentation.  Nintendo makes no
 * representations about the suitability of this software for any
 * purpose.  It is provided "as is" without express or implied warranty.
 */

import "es/base/IStream.idl";
import "es/device/INetworkInterface.idl";
import "es/net/IInternetAddress.idl";

/**
 * This interface provides methods for managing network configurations.
 */
[object, uuid(6db45dae-c85e-11db-9c02-0009bf000001)]
interface IInternetConfig : IInterface
{
    /** Registers the specified internet address with the specified prefix
     *  to the TCP/IP network subsystem.
     * @param address the internet address to be registered.
     * @param prefix length of the prefix.
     * @see IInternetAddress
     */
    void addAddress(IInternetAddress* address, unsigned int prefix);

    /** Gets the internet address of the network interface
     * corresponding to the specified scope ID.
     * @param scopeID the scope ID of the network interface.
     * @return the internet address.
     */
    IInternetAddress* getAddress(unsigned int scopeID);

    /** Unregisters the specified internet address from the TCP/IP network subsystem.
     * @param address the internet address of the network interface.
     */
    void removeAddress(IInternetAddress* address);

    /** Adds the specified internet address as a router to the TCP/IP network subsystem.
     * @param router the internet address of the router.
     */
    void addRouter(IInternetAddress* router);

    /** Gets the router address from the TCP/IP network subsystem.
     * @return the internet address of the router.
     */
    IInternetAddress* getRouter();

    /** Removes the specified router from the TCP/IP network subsystem.
     * @param router the internet address of the router to be removed.
     */
    void removeRouter(IInternetAddress* router);

    /** Registers the specified network interface to the TCP/IP network subsystem.
     * @param stream stream of the network interface to be registered.
     * @param hrd the hardware type of the network interface (ARPHdr::HRD_*).
     * @return DIX ID of the network interface.
     * @see ARPHdr
     */
    int addInterface(INetworkInterface* networkInterface);

    /** Gets the network interface corresponding to the specified scope ID.
     * @param scope the scope ID of the network interface.
     * @return the network interface.
     */
    IInterface* getInterface(int scopeID);

    /** Gets the scope identifier of the specified network interface.
     * @return this scope identifier, or zero if the specified network
     *         interface is not registered.
     */
    int getScopeID(INetworkInterface* networkInterface);

    /** Unregisters the specified network interface.
     * @param stream stream of the network interface to be unregistered.
     */
    void removeInterface(INetworkInterface* networkInterface);

    /** Adds the specified internet address as a DNS server to the TCP/IP network subsystem.
     * @param address the internet address of the DNS server.
     */
    void addNameServer(IInternetAddress* address);

    /** Gets the DNS server address from the TCP/IP network subsystem.
     * @return the internet address of the DNS server.
     */
    IInternetAddress* getNameServer();

    /** Removes the specified DNS server from the TCP/IP network subsystem.
     * @param address the internet address of the DNS server to be removed.
     */
    void removeNameServer(IInternetAddress* address);
}

/*
 * Copyright 2008 Google Inc.
 * Copyright 2006, 2007 Nintendo Co., Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef NINTENDO_ES_NET_IINTERNETCONFIG_IDL_INCLUDED
#define NINTENDO_ES_NET_IINTERNETCONFIG_IDL_INCLUDED

#include "es/device/INetworkInterface.idl"
#include "es/net/IInternetAddress.idl"

module es
{
    /**
     * This interface provides methods for managing network configurations.
     */
    interface IInternetConfig : IInterface
    {
        #pragma ID IInternetConfig = "DCE:6db45dae-c85e-11db-9c02-0009bf000001";

        /** Adds the specified internet address as a local host address with the
         * specified prefix to the TCP/IP network subsystem.
         * @param address the internet address to be registered.
         * @param prefix length of the prefix.
         * @see IInternetAddress
         */
        void addAddress(in IInternetAddress address, in unsigned long prefix);

        /** Gets the internet address of the network interface
         * corresponding to the specified scope ID.
         * @param scopeID the scope ID of the network interface.
         * @return the internet address.
         */
        IInternetAddress getAddress(in unsigned long scopeID);

        /** Removes the specified internet local host address from the TCP/IP
         * network subsystem.
         * @param address the internet address of the network interface.
         */
        void removeAddress(in IInternetAddress address);

        /** Adds the specified internet address as a router to the TCP/IP
         * network subsystem.
         * @param router the internet address of the router.
         */
        void addRouter(in IInternetAddress router);

        /** Gets the router address from the TCP/IP network subsystem.
         * @return the internet address of the router.
         */
        IInternetAddress getRouter();

        /** Removes the specified router from the TCP/IP network subsystem.
         * @param router the internet address of the router to be removed.
         */
        void removeRouter(in IInternetAddress router);

        /** Adds the specified network interface to the TCP/IP network
         * subsystem.
         * @param stream stream of the network interface to be registered.
         * @param hrd the hardware type of the network interface (ARPHdr::HRD_*).
         * @return DIX ID of the network interface.
         * @see ARPHdr
         */
        long addInterface(in INetworkInterface networkInterface);

        /** Gets the network interface corresponding to the specified scope ID.
         * @param scope the scope ID of the network interface.
         * @return the network interface.
         */
        IInterface getInterface(in long scopeID);

        /** Gets the scope identifier of the specified network interface.
         * @return this scope identifier, or zero if the specified network
         *         interface is not registered.
         */
        long getScopeID(in INetworkInterface networkInterface);

        /** Removes the specified network interface from the TCP/IP network
         * subsystem.
         * @param stream stream of the network interface to be unregistered.
         */
        void removeInterface(in INetworkInterface networkInterface);

        /** Adds the specified internet address as a DNS server to the TCP/IP
        * network subsystem.
         * @param address the internet address of the DNS server.
         */
        void addNameServer(in IInternetAddress address);

        /** Gets the DNS server address from the TCP/IP network subsystem.
         * @return the internet address of the DNS server.
         */
        IInternetAddress getNameServer();

        /** Removes the specified DNS server from the TCP/IP network subsystem.
         * @param address the internet address of the DNS server to be removed.
         */
        void removeNameServer(in IInternetAddress address);
    };
};

#endif // NINTENDO_ES_NET_IINTERNETCONFIG_IDL_INCLUDED

/*
 * Copyright (c) 2006, 2007
 * Nintendo Co., Ltd.
 *
 * Permission to use, copy, modify, distribute and sell this software
 * and its documentation for any purpose is hereby granted without fee,
 * provided that the above copyright notice appear in all copies and
 * that both that copyright notice and this permission notice appear
 * in supporting documentation.  Nintendo makes no
 * representations about the suitability of this software for any
 * purpose.  It is provided "as is" without express or implied warranty.
 */

import "es/base/IInterface.idl";

/**
 */
[object, uuid(c466c947-602b-49c1-8d67-05d292fa65c4)]
interface IEventQueue : IInterface
{
    /* User input recording II:
       The following functions and definition can be used on
       platform supporting events directly.
    */
    /* types of events */
    enum EventType
    {
        EventTypeNone = 0,
        EventTypeMouse = 1,
        EventTypeKeyboard = 2,
        EventTypeDragDropFiles = 3
    };

    /* keypress state for keyboard events */
    enum KeypressState
    {
        EventKeyChar = 0,
        EventKeyDown = 1,
        EventKeyUp = 2
    };

    /* button definitions */
    enum ButtonDefinition
    {
        RedButtonBit = 4,
        YellowButtonBit = 2,
        BlueButtonBit = 1
    };

    /* modifier definitions */
    enum ModifierDefinition
    {
        ShiftKeyBit = 1,
        CtrlKeyBit = 2,
        OptionKeyBit = 4,
        CommandKeyBit = 8
    };

    /* generic input event definition */
    struct InputEvent
    {
        int type; /* type of event; either one of EventTypeXXX */
        unsigned int timeStamp; /* time stamp */
         /* the interpretation of the following fields depend on the type of the event */
        int unused1;
        int unused2;
        int unused3;
        int unused4;
        int unused5;
        int unused6;
    };

    /* mouse input event definition */
    struct MouseEvent
    {
        int type; /* EventTypeMouse */
        unsigned int timeStamp; /* time stamp */
        int x; /* mouse position x */
        int y; /* mouse position y */
        int buttons; /* combination of xxxButtonBit */
        int modifiers; /* combination of xxxKeyBit */
        int reserved1; /* reserved for future use */
        int reserved2; /* reserved for future use */
    };

    /* keyboard input event definition */
    struct KeyboardEvent
    {
        int type; /* EventTypeKeyboard */
        unsigned int timeStamp; /* time stamp */
        int charCode; /* character code in Mac Roman encoding */
        int pressCode; /* press code; any of EventKeyXXX */
        int modifiers; /* combination of xxxKeyBit */
        int reserved1; /* reserved for future use */
        int reserved2; /* reserved for future use */
        int reserved3; /* reserved for future use */
    };

    boolean getEvent([out] InputEvent* event);
    boolean getKeystroke([out] int* stroke);
    boolean peekKeystroke([out] int* stroke);
    unsigned int getButtonState();
    void getMousePoint([out] int& x, [out] int &y);
    boolean keyEvent([in, size_is(size)] void* data, int size);
    boolean mouseEvent([in, size_is(size)] void* data, int size);
    boolean wait(long timeout);
    void notify();
}

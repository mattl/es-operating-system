/*
 * Copyright 2008, 2009 Google Inc.
 * Copyright 2006, 2007 Nintendo Co., Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef NINTENDO_ES_DEVICE_IPIC_IDL_INCLUDED
#define NINTENDO_ES_DEVICE_IPIC_IDL_INCLUDED

module es
{
    /** This interface represents operations of a programmable interrupt controller.
     */
    interface Pic
    {
        /** Starts the specified IRQ.
         * @param bus   the bus.
         * @param irq   the IRQ.
         * @return the interrupt vector for the interrupt request line.
         */
        long startup(in unsigned long bus, in unsigned long irq);

        /** Stops the specified IRQ.
         * @param bus   the bus.
         * @param irq   the IRQ.
         * @return the interrupt vector for the interrupt request line.
         */
        long shutdown(in unsigned long bus, in unsigned long irq);

        /** Enables the specified IRQ.
         * @param bus   the bus.
         * @param irq   the IRQ.
         * @return the interrupt vector for the interrupt request line.
         */
        long enable(in unsigned long bus, in unsigned long irq);

        /** Disables the specified IRQ.
         * @param bus   the bus.
         * @param irq   the IRQ.
         * @return the interrupt vector for the interrupt request line.
         */
        long disable(in unsigned long bus, in unsigned long irq);

        /** Acknowledges the received IRQ.
         * @param vec   the interrupt vector.
         */
        boolean ack(in long vec);

        /** Completes the acknowledged IRQ handling.
         * @param vec   the interrupt vector.
         */
        boolean end(in long vec);

        /** Sets the affinity of the specified IRQ to the specific CPUs.
         * @param bus   the bus.
         * @param irq   the IRQ.
         * @param mask  the set of processors.
         * @return the interrupt vector for the interrupt request line.
         */
        long setAffinity(in unsigned long bus, in unsigned long irq, in unsigned long mask);

        /** Sets the processor execution level to "idle".
         *  The current processor will handle all interrupts.
         * @return the previous execution level.
         */
        unsigned long splIdle();

        /** Sets the processor execution level to "low".
         *  The current processor can handle all interrupts but it has a
         *  higher priority than an "idle" processor.
         * @return the previous execution level.
         */
        unsigned long splLo();

        /** Sets the processor execution level to "high".
         *  All interrupts are inhibited from being handled.
         * @return the previous execution level.
         */
        unsigned long splHi();

        /** Sets the processor execution level to the specified value
         * @param x the execution level returned from splIdle, splLo, or splHi.
         */
        void splX(in unsigned long x);
    };
};

#endif // NINTENDO_ES_DEVICE_IPIC_IDL_INCLUDED


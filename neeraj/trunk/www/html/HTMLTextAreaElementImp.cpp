// Generated by esidl (r1752).
// This file is expected to be modified for the Web IDL interface
// implementation.  Permission to use, copy, modify and distribute
// this file in any software license is hereby granted.

#include "HTMLTextAreaElementImp.h"

namespace org
{
namespace w3c
{
namespace dom
{
namespace bootstrap
{

bool HTMLTextAreaElementImp::getAutofocus()
{
    // TODO: implement me!
    return 0;
}

void HTMLTextAreaElementImp::setAutofocus(bool autofocus)
{
    // TODO: implement me!
}

unsigned int HTMLTextAreaElementImp::getCols()
{
    // TODO: implement me!
    return 0;
}

void HTMLTextAreaElementImp::setCols(unsigned int cols)
{
    // TODO: implement me!
}

std::u16string HTMLTextAreaElementImp::getDirName()
{
    // TODO: implement me!
    return u"";
}

void HTMLTextAreaElementImp::setDirName(std::u16string dirName)
{
    // TODO: implement me!
}

bool HTMLTextAreaElementImp::getDisabled()
{
    // TODO: implement me!
    return 0;
}

void HTMLTextAreaElementImp::setDisabled(bool disabled)
{
    // TODO: implement me!
}

html::HTMLFormElement HTMLTextAreaElementImp::getForm()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

int HTMLTextAreaElementImp::getMaxLength()
{
    // TODO: implement me!
    return 0;
}

void HTMLTextAreaElementImp::setMaxLength(int maxLength)
{
    // TODO: implement me!
}

std::u16string HTMLTextAreaElementImp::getName()
{
    // TODO: implement me!
    return u"";
}

void HTMLTextAreaElementImp::setName(std::u16string name)
{
    // TODO: implement me!
}

std::u16string HTMLTextAreaElementImp::getPlaceholder()
{
    // TODO: implement me!
    return u"";
}

void HTMLTextAreaElementImp::setPlaceholder(std::u16string placeholder)
{
    // TODO: implement me!
}

bool HTMLTextAreaElementImp::getReadOnly()
{
    // TODO: implement me!
    return 0;
}

void HTMLTextAreaElementImp::setReadOnly(bool readOnly)
{
    // TODO: implement me!
}

bool HTMLTextAreaElementImp::getRequired()
{
    // TODO: implement me!
    return 0;
}

void HTMLTextAreaElementImp::setRequired(bool required)
{
    // TODO: implement me!
}

unsigned int HTMLTextAreaElementImp::getRows()
{
    // TODO: implement me!
    return 0;
}

void HTMLTextAreaElementImp::setRows(unsigned int rows)
{
    // TODO: implement me!
}

std::u16string HTMLTextAreaElementImp::getWrap()
{
    // TODO: implement me!
    return u"";
}

void HTMLTextAreaElementImp::setWrap(std::u16string wrap)
{
    // TODO: implement me!
}

std::u16string HTMLTextAreaElementImp::getType()
{
    // TODO: implement me!
    return u"";
}

std::u16string HTMLTextAreaElementImp::getDefaultValue()
{
    // TODO: implement me!
    return u"";
}

void HTMLTextAreaElementImp::setDefaultValue(std::u16string defaultValue)
{
    // TODO: implement me!
}

std::u16string HTMLTextAreaElementImp::getValue()
{
    // TODO: implement me!
    return u"";
}

void HTMLTextAreaElementImp::setValue(std::u16string value)
{
    // TODO: implement me!
}

unsigned int HTMLTextAreaElementImp::getTextLength()
{
    // TODO: implement me!
    return 0;
}

bool HTMLTextAreaElementImp::getWillValidate()
{
    // TODO: implement me!
    return 0;
}

html::ValidityState HTMLTextAreaElementImp::getValidity()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

std::u16string HTMLTextAreaElementImp::getValidationMessage()
{
    // TODO: implement me!
    return u"";
}

bool HTMLTextAreaElementImp::checkValidity()
{
    // TODO: implement me!
    return 0;
}

void HTMLTextAreaElementImp::setCustomValidity(std::u16string error)
{
    // TODO: implement me!
}

NodeList HTMLTextAreaElementImp::getLabels()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLTextAreaElementImp::select()
{
    // TODO: implement me!
}

unsigned int HTMLTextAreaElementImp::getSelectionStart()
{
    // TODO: implement me!
    return 0;
}

void HTMLTextAreaElementImp::setSelectionStart(unsigned int selectionStart)
{
    // TODO: implement me!
}

unsigned int HTMLTextAreaElementImp::getSelectionEnd()
{
    // TODO: implement me!
    return 0;
}

void HTMLTextAreaElementImp::setSelectionEnd(unsigned int selectionEnd)
{
    // TODO: implement me!
}

std::u16string HTMLTextAreaElementImp::getSelectionDirection()
{
    // TODO: implement me!
    return u"";
}

void HTMLTextAreaElementImp::setSelectionDirection(std::u16string selectionDirection)
{
    // TODO: implement me!
}

void HTMLTextAreaElementImp::setSelectionRange(unsigned int start, unsigned int end)
{
    // TODO: implement me!
}

void HTMLTextAreaElementImp::setSelectionRange(unsigned int start, unsigned int end, std::u16string direction)
{
    // TODO: implement me!
}

}
}
}
}

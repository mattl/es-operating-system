// Generated by esidl 0.2.1.
// This file is expected to be modified for the Web IDL interface
// implementation.  Permission to use, copy, modify and distribute
// this file in any software license is hereby granted.

#include "HTMLDocumentImp.h"

namespace org
{
namespace w3c
{
namespace dom
{
namespace bootstrap
{

html::Location HTMLDocumentImp::getLocation()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setLocation(const std::u16string& location)
{
    // TODO: implement me!
}

std::u16string HTMLDocumentImp::getURL()
{
    // TODO: implement me!
    return u"";
}

std::u16string HTMLDocumentImp::getDomain()
{
    // TODO: implement me!
    return u"";
}

void HTMLDocumentImp::setDomain(const std::u16string& domain)
{
    // TODO: implement me!
}

std::u16string HTMLDocumentImp::getReferrer()
{
    // TODO: implement me!
    return u"";
}

std::u16string HTMLDocumentImp::getCookie()
{
    // TODO: implement me!
    return u"";
}

void HTMLDocumentImp::setCookie(const std::u16string& cookie)
{
    // TODO: implement me!
}

std::u16string HTMLDocumentImp::getLastModified()
{
    // TODO: implement me!
    return u"";
}

std::u16string HTMLDocumentImp::getReadyState()
{
    // TODO: implement me!
    return u"";
}

Any HTMLDocumentImp::getElement(const std::u16string& name)
{
    // TODO: implement me!
    return 0;
}

std::u16string HTMLDocumentImp::getTitle()
{
    // TODO: implement me!
    return u"";
}

void HTMLDocumentImp::setTitle(const std::u16string& title)
{
    // TODO: implement me!
}

std::u16string HTMLDocumentImp::getDir()
{
    // TODO: implement me!
    return u"";
}

void HTMLDocumentImp::setDir(const std::u16string& dir)
{
    // TODO: implement me!
}

html::HTMLElement HTMLDocumentImp::getBody()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setBody(html::HTMLElement body)
{
    // TODO: implement me!
}

html::HTMLHeadElement HTMLDocumentImp::getHead()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

html::HTMLCollection HTMLDocumentImp::getImages()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

html::HTMLCollection HTMLDocumentImp::getEmbeds()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

html::HTMLCollection HTMLDocumentImp::getPlugins()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

html::HTMLCollection HTMLDocumentImp::getLinks()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

html::HTMLCollection HTMLDocumentImp::getForms()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

html::HTMLCollection HTMLDocumentImp::getScripts()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

NodeList HTMLDocumentImp::getElementsByName(const std::u16string& elementName)
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

DOMElementMap HTMLDocumentImp::getCssElementMap()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

std::u16string HTMLDocumentImp::getInnerHTML()
{
    // TODO: implement me!
    return u"";
}

void HTMLDocumentImp::setInnerHTML(const std::u16string& innerHTML)
{
    // TODO: implement me!
}

html::HTMLDocument HTMLDocumentImp::open()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

html::HTMLDocument HTMLDocumentImp::open(const std::u16string& type)
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

html::HTMLDocument HTMLDocumentImp::open(const std::u16string& type, const std::u16string& replace)
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

html::Window HTMLDocumentImp::open(const std::u16string& url, const std::u16string& name, const std::u16string& features)
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

html::Window HTMLDocumentImp::open(const std::u16string& url, const std::u16string& name, const std::u16string& features, bool replace)
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::close()
{
    // TODO: implement me!
}

void HTMLDocumentImp::write(Variadic<std::u16string> text)
{
    // TODO: implement me!
}

void HTMLDocumentImp::writeln(Variadic<std::u16string> text)
{
    // TODO: implement me!
}

html::Window HTMLDocumentImp::getDefaultView()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

Element HTMLDocumentImp::getActiveElement()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

bool HTMLDocumentImp::hasFocus()
{
    // TODO: implement me!
    return 0;
}

std::u16string HTMLDocumentImp::getDesignMode()
{
    // TODO: implement me!
    return u"";
}

void HTMLDocumentImp::setDesignMode(const std::u16string& designMode)
{
    // TODO: implement me!
}

bool HTMLDocumentImp::execCommand(const std::u16string& commandId)
{
    // TODO: implement me!
    return 0;
}

bool HTMLDocumentImp::execCommand(const std::u16string& commandId, bool showUI)
{
    // TODO: implement me!
    return 0;
}

bool HTMLDocumentImp::execCommand(const std::u16string& commandId, bool showUI, const std::u16string& value)
{
    // TODO: implement me!
    return 0;
}

bool HTMLDocumentImp::queryCommandEnabled(const std::u16string& commandId)
{
    // TODO: implement me!
    return 0;
}

bool HTMLDocumentImp::queryCommandIndeterm(const std::u16string& commandId)
{
    // TODO: implement me!
    return 0;
}

bool HTMLDocumentImp::queryCommandState(const std::u16string& commandId)
{
    // TODO: implement me!
    return 0;
}

bool HTMLDocumentImp::queryCommandSupported(const std::u16string& commandId)
{
    // TODO: implement me!
    return 0;
}

std::u16string HTMLDocumentImp::queryCommandValue(const std::u16string& commandId)
{
    // TODO: implement me!
    return u"";
}

html::HTMLCollection HTMLDocumentImp::getCommands()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

html::Function HTMLDocumentImp::getOnabort()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnabort(html::Function onabort)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnblur()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnblur(html::Function onblur)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOncanplay()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOncanplay(html::Function oncanplay)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOncanplaythrough()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOncanplaythrough(html::Function oncanplaythrough)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnchange()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnchange(html::Function onchange)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnclick()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnclick(html::Function onclick)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOncontextmenu()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOncontextmenu(html::Function oncontextmenu)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOncuechange()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOncuechange(html::Function oncuechange)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOndblclick()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOndblclick(html::Function ondblclick)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOndrag()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOndrag(html::Function ondrag)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOndragend()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOndragend(html::Function ondragend)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOndragenter()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOndragenter(html::Function ondragenter)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOndragleave()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOndragleave(html::Function ondragleave)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOndragover()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOndragover(html::Function ondragover)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOndragstart()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOndragstart(html::Function ondragstart)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOndrop()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOndrop(html::Function ondrop)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOndurationchange()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOndurationchange(html::Function ondurationchange)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnemptied()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnemptied(html::Function onemptied)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnended()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnended(html::Function onended)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnerror()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnerror(html::Function onerror)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnfocus()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnfocus(html::Function onfocus)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOninput()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOninput(html::Function oninput)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOninvalid()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOninvalid(html::Function oninvalid)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnkeydown()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnkeydown(html::Function onkeydown)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnkeypress()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnkeypress(html::Function onkeypress)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnkeyup()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnkeyup(html::Function onkeyup)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnload()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnload(html::Function onload)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnloadeddata()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnloadeddata(html::Function onloadeddata)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnloadedmetadata()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnloadedmetadata(html::Function onloadedmetadata)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnloadstart()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnloadstart(html::Function onloadstart)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnmousedown()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnmousedown(html::Function onmousedown)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnmousemove()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnmousemove(html::Function onmousemove)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnmouseout()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnmouseout(html::Function onmouseout)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnmouseover()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnmouseover(html::Function onmouseover)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnmouseup()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnmouseup(html::Function onmouseup)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnmousewheel()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnmousewheel(html::Function onmousewheel)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnpause()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnpause(html::Function onpause)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnplay()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnplay(html::Function onplay)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnplaying()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnplaying(html::Function onplaying)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnprogress()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnprogress(html::Function onprogress)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnratechange()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnratechange(html::Function onratechange)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnreadystatechange()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnreadystatechange(html::Function onreadystatechange)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnreset()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnreset(html::Function onreset)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnscroll()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnscroll(html::Function onscroll)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnseeked()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnseeked(html::Function onseeked)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnseeking()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnseeking(html::Function onseeking)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnselect()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnselect(html::Function onselect)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnshow()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnshow(html::Function onshow)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnstalled()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnstalled(html::Function onstalled)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnsubmit()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnsubmit(html::Function onsubmit)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnsuspend()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnsuspend(html::Function onsuspend)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOntimeupdate()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOntimeupdate(html::Function ontimeupdate)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnvolumechange()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnvolumechange(html::Function onvolumechange)
{
    // TODO: implement me!
}

html::Function HTMLDocumentImp::getOnwaiting()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::setOnwaiting(html::Function onwaiting)
{
    // TODO: implement me!
}

std::u16string HTMLDocumentImp::getFgColor()
{
    // TODO: implement me!
    return u"";
}

void HTMLDocumentImp::setFgColor(const std::u16string& fgColor)
{
    // TODO: implement me!
}

std::u16string HTMLDocumentImp::getBgColor()
{
    // TODO: implement me!
    return u"";
}

void HTMLDocumentImp::setBgColor(const std::u16string& bgColor)
{
    // TODO: implement me!
}

std::u16string HTMLDocumentImp::getLinkColor()
{
    // TODO: implement me!
    return u"";
}

void HTMLDocumentImp::setLinkColor(const std::u16string& linkColor)
{
    // TODO: implement me!
}

std::u16string HTMLDocumentImp::getVlinkColor()
{
    // TODO: implement me!
    return u"";
}

void HTMLDocumentImp::setVlinkColor(const std::u16string& vlinkColor)
{
    // TODO: implement me!
}

std::u16string HTMLDocumentImp::getAlinkColor()
{
    // TODO: implement me!
    return u"";
}

void HTMLDocumentImp::setAlinkColor(const std::u16string& alinkColor)
{
    // TODO: implement me!
}

html::HTMLCollection HTMLDocumentImp::getAnchors()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

html::HTMLCollection HTMLDocumentImp::getApplets()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLDocumentImp::clear()
{
    // TODO: implement me!
}

html::HTMLAllCollection HTMLDocumentImp::getAll()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

}
}
}
}

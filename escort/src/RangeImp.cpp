// Generated by esidl 0.2.1.
// This file is expected to be modified for the Web IDL interface
// implementation.  Permission to use, copy, modify and distribute
// this file in any software license is hereby granted.

#include "RangeImp.h"

namespace org
{
namespace w3c
{
namespace dom
{
namespace bootstrap
{

Node RangeImp::getStartContainer() throw(DOMException)
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

int RangeImp::getStartOffset() throw(DOMException)
{
    // TODO: implement me!
    return 0;
}

Node RangeImp::getEndContainer() throw(DOMException)
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

int RangeImp::getEndOffset() throw(DOMException)
{
    // TODO: implement me!
    return 0;
}

bool RangeImp::getCollapsed() throw(DOMException)
{
    // TODO: implement me!
    return 0;
}

Node RangeImp::getCommonAncestorContainer() throw(DOMException)
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void RangeImp::setStart(Node refNode, int offset) throw(ranges::RangeException, DOMException)
{
    // TODO: implement me!
}

void RangeImp::setEnd(Node refNode, int offset) throw(ranges::RangeException, DOMException)
{
    // TODO: implement me!
}

void RangeImp::setStartBefore(Node refNode) throw(ranges::RangeException, DOMException)
{
    // TODO: implement me!
}

void RangeImp::setStartAfter(Node refNode) throw(ranges::RangeException, DOMException)
{
    // TODO: implement me!
}

void RangeImp::setEndBefore(Node refNode) throw(ranges::RangeException, DOMException)
{
    // TODO: implement me!
}

void RangeImp::setEndAfter(Node refNode) throw(ranges::RangeException, DOMException)
{
    // TODO: implement me!
}

void RangeImp::collapse(bool toStart) throw(DOMException)
{
    // TODO: implement me!
}

void RangeImp::selectNode(Node refNode) throw(ranges::RangeException, DOMException)
{
    // TODO: implement me!
}

void RangeImp::selectNodeContents(Node refNode) throw(ranges::RangeException, DOMException)
{
    // TODO: implement me!
}

short RangeImp::compareBoundaryPoints(unsigned short how, ranges::Range sourceRange) throw(DOMException)
{
    // TODO: implement me!
    return 0;
}

void RangeImp::deleteContents() throw(DOMException)
{
    // TODO: implement me!
}

DocumentFragment RangeImp::extractContents() throw(DOMException)
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

DocumentFragment RangeImp::cloneContents() throw(DOMException)
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void RangeImp::insertNode(Node newNode) throw(DOMException, ranges::RangeException)
{
    // TODO: implement me!
}

void RangeImp::surroundContents(Node newParent) throw(DOMException, ranges::RangeException)
{
    // TODO: implement me!
}

ranges::Range RangeImp::cloneRange() throw(DOMException)
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

std::u16string RangeImp::toString() throw(DOMException)
{
    // TODO: implement me!
    return u"";
}

void RangeImp::detach() throw(DOMException)
{
    // TODO: implement me!
}

views::ClientRectList RangeImp::getClientRects()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

views::ClientRect RangeImp::getBoundingClientRect()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

}
}
}
}

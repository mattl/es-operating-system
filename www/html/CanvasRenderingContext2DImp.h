// Generated by esidl (r1752).
// This file is expected to be modified for the Web IDL interface
// implementation.  Permission to use, copy, modify and distribute
// this file in any software license is hereby granted.

#ifndef ORG_W3C_DOM_BOOTSTRAP_CANVASRENDERINGCONTEXT2DIMP_H_INCLUDED
#define ORG_W3C_DOM_BOOTSTRAP_CANVASRENDERINGCONTEXT2DIMP_H_INCLUDED

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <org/w3c/dom/html/CanvasRenderingContext2D.h>

#include <org/w3c/dom/Element.h>
#include <org/w3c/dom/html/HTMLImageElement.h>
#include <org/w3c/dom/html/HTMLVideoElement.h>
#include <org/w3c/dom/html/HTMLCanvasElement.h>
#include <org/w3c/dom/html/CanvasGradient.h>
#include <org/w3c/dom/html/CanvasPattern.h>
#include <org/w3c/dom/html/TextMetrics.h>
#include <org/w3c/dom/html/ImageData.h>

namespace org
{
namespace w3c
{
namespace dom
{
namespace bootstrap
{
class CanvasRenderingContext2DImp : public ObjectMixin<CanvasRenderingContext2DImp>
{
public:
    // CanvasRenderingContext2D
    html::HTMLCanvasElement getCanvas() __attribute__((weak));
    void save() __attribute__((weak));
    void restore() __attribute__((weak));
    void scale(double x, double y) __attribute__((weak));
    void rotate(double angle) __attribute__((weak));
    void translate(double x, double y) __attribute__((weak));
    void transform(double a, double b, double c, double d, double e, double f) __attribute__((weak));
    void setTransform(double a, double b, double c, double d, double e, double f) __attribute__((weak));
    double getGlobalAlpha() __attribute__((weak));
    void setGlobalAlpha(double globalAlpha) __attribute__((weak));
    std::u16string getGlobalCompositeOperation() __attribute__((weak));
    void setGlobalCompositeOperation(std::u16string globalCompositeOperation) __attribute__((weak));
    Any getStrokeStyle() __attribute__((weak));
    void setStrokeStyle(Any strokeStyle) __attribute__((weak));
    Any getFillStyle() __attribute__((weak));
    void setFillStyle(Any fillStyle) __attribute__((weak));
    html::CanvasGradient createLinearGradient(double x0, double y0, double x1, double y1) __attribute__((weak));
    html::CanvasGradient createRadialGradient(double x0, double y0, double r0, double x1, double y1, double r1) __attribute__((weak));
    html::CanvasPattern createPattern(html::HTMLImageElement image, std::u16string repetition) __attribute__((weak));
    html::CanvasPattern createPattern(html::HTMLCanvasElement image, std::u16string repetition) __attribute__((weak));
    html::CanvasPattern createPattern(html::HTMLVideoElement image, std::u16string repetition) __attribute__((weak));
    double getLineWidth() __attribute__((weak));
    void setLineWidth(double lineWidth) __attribute__((weak));
    std::u16string getLineCap() __attribute__((weak));
    void setLineCap(std::u16string lineCap) __attribute__((weak));
    std::u16string getLineJoin() __attribute__((weak));
    void setLineJoin(std::u16string lineJoin) __attribute__((weak));
    double getMiterLimit() __attribute__((weak));
    void setMiterLimit(double miterLimit) __attribute__((weak));
    double getShadowOffsetX() __attribute__((weak));
    void setShadowOffsetX(double shadowOffsetX) __attribute__((weak));
    double getShadowOffsetY() __attribute__((weak));
    void setShadowOffsetY(double shadowOffsetY) __attribute__((weak));
    double getShadowBlur() __attribute__((weak));
    void setShadowBlur(double shadowBlur) __attribute__((weak));
    std::u16string getShadowColor() __attribute__((weak));
    void setShadowColor(std::u16string shadowColor) __attribute__((weak));
    void clearRect(double x, double y, double w, double h) __attribute__((weak));
    void fillRect(double x, double y, double w, double h) __attribute__((weak));
    void strokeRect(double x, double y, double w, double h) __attribute__((weak));
    void beginPath() __attribute__((weak));
    void closePath() __attribute__((weak));
    void moveTo(double x, double y) __attribute__((weak));
    void lineTo(double x, double y) __attribute__((weak));
    void quadraticCurveTo(double cpx, double cpy, double x, double y) __attribute__((weak));
    void bezierCurveTo(double cp1x, double cp1y, double cp2x, double cp2y, double x, double y) __attribute__((weak));
    void arcTo(double x1, double y1, double x2, double y2, double radius) __attribute__((weak));
    void rect(double x, double y, double w, double h) __attribute__((weak));
    void arc(double x, double y, double radius, double startAngle, double endAngle) __attribute__((weak));
    void arc(double x, double y, double radius, double startAngle, double endAngle, bool anticlockwise) __attribute__((weak));
    void fill() __attribute__((weak));
    void stroke() __attribute__((weak));
    void drawSystemFocusRing(Element element) __attribute__((weak));
    bool drawCustomFocusRing(Element element) __attribute__((weak));
    void scrollPathIntoView() __attribute__((weak));
    void clip() __attribute__((weak));
    bool isPointInPath(double x, double y) __attribute__((weak));
    std::u16string getFont() __attribute__((weak));
    void setFont(std::u16string font) __attribute__((weak));
    std::u16string getTextAlign() __attribute__((weak));
    void setTextAlign(std::u16string textAlign) __attribute__((weak));
    std::u16string getTextBaseline() __attribute__((weak));
    void setTextBaseline(std::u16string textBaseline) __attribute__((weak));
    void fillText(std::u16string text, double x, double y) __attribute__((weak));
    void fillText(std::u16string text, double x, double y, double maxWidth) __attribute__((weak));
    void strokeText(std::u16string text, double x, double y) __attribute__((weak));
    void strokeText(std::u16string text, double x, double y, double maxWidth) __attribute__((weak));
    html::TextMetrics measureText(std::u16string text) __attribute__((weak));
    void drawImage(html::HTMLImageElement image, double dx, double dy) __attribute__((weak));
    void drawImage(html::HTMLImageElement image, double dx, double dy, double dw, double dh) __attribute__((weak));
    void drawImage(html::HTMLImageElement image, double sx, double sy, double sw, double sh, double dx, double dy, double dw, double dh) __attribute__((weak));
    void drawImage(html::HTMLCanvasElement image, double dx, double dy) __attribute__((weak));
    void drawImage(html::HTMLCanvasElement image, double dx, double dy, double dw, double dh) __attribute__((weak));
    void drawImage(html::HTMLCanvasElement image, double sx, double sy, double sw, double sh, double dx, double dy, double dw, double dh) __attribute__((weak));
    void drawImage(html::HTMLVideoElement image, double dx, double dy) __attribute__((weak));
    void drawImage(html::HTMLVideoElement image, double dx, double dy, double dw, double dh) __attribute__((weak));
    void drawImage(html::HTMLVideoElement image, double sx, double sy, double sw, double sh, double dx, double dy, double dw, double dh) __attribute__((weak));
    html::ImageData createImageData(double sw, double sh) __attribute__((weak));
    html::ImageData createImageData(html::ImageData imagedata) __attribute__((weak));
    html::ImageData getImageData(double sx, double sy, double sw, double sh) __attribute__((weak));
    void putImageData(html::ImageData imagedata, double dx, double dy) __attribute__((weak));
    void putImageData(html::ImageData imagedata, double dx, double dy, double dirtyX, double dirtyY, double dirtyWidth, double dirtyHeight) __attribute__((weak));
    // Object
    virtual Any message_(uint32_t selector, const char* id, int argc, Any* argv)
    {
        return html::CanvasRenderingContext2D::dispatch(this, selector, id, argc, argv);
    }
    static const char* const getMetaData()
    {
        return html::CanvasRenderingContext2D::getMetaData();
    }
};

}
}
}
}

#endif  // ORG_W3C_DOM_BOOTSTRAP_CANVASRENDERINGCONTEXT2DIMP_H_INCLUDED

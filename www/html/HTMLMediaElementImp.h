// Generated by esidl (r1752).
// This file is expected to be modified for the Web IDL interface
// implementation.  Permission to use, copy, modify and distribute
// this file in any software license is hereby granted.

#ifndef ORG_W3C_DOM_BOOTSTRAP_HTMLMEDIAELEMENTIMP_H_INCLUDED
#define ORG_W3C_DOM_BOOTSTRAP_HTMLMEDIAELEMENTIMP_H_INCLUDED

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <org/w3c/dom/html/HTMLMediaElement.h>
#include "HTMLElementImp.h"

#include <org/w3c/dom/html/HTMLElement.h>
#include <org/w3c/dom/html/MediaError.h>
#include <org/w3c/dom/html/AudioTrackList.h>
#include <org/w3c/dom/html/VideoTrackList.h>
#include <org/w3c/dom/html/MediaController.h>
#include <org/w3c/dom/html/TextTrack.h>
#include <org/w3c/dom/html/MutableTextTrack.h>
#include <org/w3c/dom/html/TimeRanges.h>

namespace org
{
namespace w3c
{
namespace dom
{
namespace bootstrap
{
class HTMLMediaElementImp : public ObjectMixin<HTMLMediaElementImp, HTMLElementImp>
{
public:
    HTMLMediaElementImp(DocumentImp* ownerDocument, const std::u16string& localName) :
        ObjectMixin(ownerDocument, localName) {
    }
    HTMLMediaElementImp(HTMLMediaElementImp* org, bool deep) :
        ObjectMixin(org, deep) {
    }

    // HTMLMediaElement
    html::MediaError getError() __attribute__((weak));
    std::u16string getSrc() __attribute__((weak));
    void setSrc(std::u16string src) __attribute__((weak));
    std::u16string getCurrentSrc() __attribute__((weak));
    std::u16string getCrossOrigin() __attribute__((weak));
    void setCrossOrigin(std::u16string crossOrigin) __attribute__((weak));
    unsigned short getNetworkState() __attribute__((weak));
    std::u16string getPreload() __attribute__((weak));
    void setPreload(std::u16string preload) __attribute__((weak));
    html::TimeRanges getBuffered() __attribute__((weak));
    void load() __attribute__((weak));
    std::u16string canPlayType(std::u16string type) __attribute__((weak));
    unsigned short getReadyState() __attribute__((weak));
    bool getSeeking() __attribute__((weak));
    double getCurrentTime() __attribute__((weak));
    void setCurrentTime(double currentTime) __attribute__((weak));
    double getInitialTime() __attribute__((weak));
    double getDuration() __attribute__((weak));
    unsigned long long getStartOffsetTime() __attribute__((weak));
    bool getPaused() __attribute__((weak));
    double getDefaultPlaybackRate() __attribute__((weak));
    void setDefaultPlaybackRate(double defaultPlaybackRate) __attribute__((weak));
    double getPlaybackRate() __attribute__((weak));
    void setPlaybackRate(double playbackRate) __attribute__((weak));
    html::TimeRanges getPlayed() __attribute__((weak));
    html::TimeRanges getSeekable() __attribute__((weak));
    bool getEnded() __attribute__((weak));
    bool getAutoplay() __attribute__((weak));
    void setAutoplay(bool autoplay) __attribute__((weak));
    bool getLoop() __attribute__((weak));
    void setLoop(bool loop) __attribute__((weak));
    void play() __attribute__((weak));
    void pause() __attribute__((weak));
    std::u16string getMediaGroup() __attribute__((weak));
    void setMediaGroup(std::u16string mediaGroup) __attribute__((weak));
    html::MediaController getController() __attribute__((weak));
    void setController(html::MediaController controller) __attribute__((weak));
    bool getControls() __attribute__((weak));
    void setControls(bool controls) __attribute__((weak));
    double getVolume() __attribute__((weak));
    void setVolume(double volume) __attribute__((weak));
    bool getMuted() __attribute__((weak));
    void setMuted(bool muted) __attribute__((weak));
    bool getDefaultMuted() __attribute__((weak));
    void setDefaultMuted(bool defaultMuted) __attribute__((weak));
    html::AudioTrackList getAudioTracks() __attribute__((weak));
    html::VideoTrackList getVideoTracks() __attribute__((weak));
    html::TextTrackList getTextTracks() __attribute__((weak));
    html::MutableTextTrack addTextTrack(std::u16string kind) __attribute__((weak));
    html::MutableTextTrack addTextTrack(std::u16string kind, std::u16string label) __attribute__((weak));
    html::MutableTextTrack addTextTrack(std::u16string kind, std::u16string label, std::u16string language) __attribute__((weak));
    // Object
    virtual Any message_(uint32_t selector, const char* id, int argc, Any* argv)
    {
        return html::HTMLMediaElement::dispatch(this, selector, id, argc, argv);
    }
    static const char* const getMetaData()
    {
        return html::HTMLMediaElement::getMetaData();
    }
};

}
}
}
}

#endif  // ORG_W3C_DOM_BOOTSTRAP_HTMLMEDIAELEMENTIMP_H_INCLUDED

// Generated by esidl (r1752).
// This file is expected to be modified for the Web IDL interface
// implementation.  Permission to use, copy, modify and distribute
// this file in any software license is hereby granted.

#ifndef ORG_W3C_DOM_BOOTSTRAP_HTMLTEXTAREAELEMENTIMP_H_INCLUDED
#define ORG_W3C_DOM_BOOTSTRAP_HTMLTEXTAREAELEMENTIMP_H_INCLUDED

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <org/w3c/dom/html/HTMLTextAreaElement.h>
#include "HTMLElementImp.h"

#include <org/w3c/dom/html/HTMLElement.h>
#include <org/w3c/dom/NodeList.h>
#include <org/w3c/dom/html/HTMLFormElement.h>
#include <org/w3c/dom/html/ValidityState.h>

namespace org
{
namespace w3c
{
namespace dom
{
namespace bootstrap
{
class HTMLTextAreaElementImp : public ObjectMixin<HTMLTextAreaElementImp, HTMLElementImp>
{
public:
    HTMLTextAreaElementImp(DocumentImp* ownerDocument) :
        ObjectMixin(ownerDocument, u"textarea") {
    }
    HTMLTextAreaElementImp(HTMLTextAreaElementImp* org, bool deep) :
        ObjectMixin(org, deep) {
    }

    // HTMLTextAreaElement
    bool getAutofocus() __attribute__((weak));
    void setAutofocus(bool autofocus) __attribute__((weak));
    unsigned int getCols() __attribute__((weak));
    void setCols(unsigned int cols) __attribute__((weak));
    std::u16string getDirName() __attribute__((weak));
    void setDirName(std::u16string dirName) __attribute__((weak));
    bool getDisabled() __attribute__((weak));
    void setDisabled(bool disabled) __attribute__((weak));
    html::HTMLFormElement getForm() __attribute__((weak));
    int getMaxLength() __attribute__((weak));
    void setMaxLength(int maxLength) __attribute__((weak));
    std::u16string getName() __attribute__((weak));
    void setName(std::u16string name) __attribute__((weak));
    std::u16string getPlaceholder() __attribute__((weak));
    void setPlaceholder(std::u16string placeholder) __attribute__((weak));
    bool getReadOnly() __attribute__((weak));
    void setReadOnly(bool readOnly) __attribute__((weak));
    bool getRequired() __attribute__((weak));
    void setRequired(bool required) __attribute__((weak));
    unsigned int getRows() __attribute__((weak));
    void setRows(unsigned int rows) __attribute__((weak));
    std::u16string getWrap() __attribute__((weak));
    void setWrap(std::u16string wrap) __attribute__((weak));
    std::u16string getType() __attribute__((weak));
    std::u16string getDefaultValue() __attribute__((weak));
    void setDefaultValue(std::u16string defaultValue) __attribute__((weak));
    std::u16string getValue() __attribute__((weak));
    void setValue(std::u16string value) __attribute__((weak));
    unsigned int getTextLength() __attribute__((weak));
    bool getWillValidate() __attribute__((weak));
    html::ValidityState getValidity() __attribute__((weak));
    std::u16string getValidationMessage() __attribute__((weak));
    bool checkValidity() __attribute__((weak));
    void setCustomValidity(std::u16string error) __attribute__((weak));
    NodeList getLabels() __attribute__((weak));
    void select() __attribute__((weak));
    unsigned int getSelectionStart() __attribute__((weak));
    void setSelectionStart(unsigned int selectionStart) __attribute__((weak));
    unsigned int getSelectionEnd() __attribute__((weak));
    void setSelectionEnd(unsigned int selectionEnd) __attribute__((weak));
    std::u16string getSelectionDirection() __attribute__((weak));
    void setSelectionDirection(std::u16string selectionDirection) __attribute__((weak));
    void setSelectionRange(unsigned int start, unsigned int end) __attribute__((weak));
    void setSelectionRange(unsigned int start, unsigned int end, std::u16string direction) __attribute__((weak));
    // Object
    virtual Any message_(uint32_t selector, const char* id, int argc, Any* argv)
    {
        return html::HTMLTextAreaElement::dispatch(this, selector, id, argc, argv);
    }
    static const char* const getMetaData()
    {
        return html::HTMLTextAreaElement::getMetaData();
    }
};

}
}
}
}

#endif  // ORG_W3C_DOM_BOOTSTRAP_HTMLTEXTAREAELEMENTIMP_H_INCLUDED

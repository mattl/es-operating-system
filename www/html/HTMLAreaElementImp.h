// Generated by esidl (r1745).
// This file is expected to be modified for the Web IDL interface
// implementation.  Permission to use, copy, modify and distribute
// this file in any software license is hereby granted.

#ifndef ORG_W3C_DOM_BOOTSTRAP_HTMLAREAELEMENTIMP_H_INCLUDED
#define ORG_W3C_DOM_BOOTSTRAP_HTMLAREAELEMENTIMP_H_INCLUDED

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <org/w3c/dom/html/HTMLAreaElement.h>
#include "HTMLElementImp.h"

#include <org/w3c/dom/html/HTMLElement.h>
#include <org/w3c/dom/DOMTokenList.h>

namespace org
{
namespace w3c
{
namespace dom
{
namespace bootstrap
{
class HTMLAreaElementImp : public ObjectMixin<HTMLAreaElementImp, HTMLElementImp>
{
public:
    // HTMLAreaElement
    std::u16string getAlt() __attribute__((weak));
    void setAlt(std::u16string alt) __attribute__((weak));
    std::u16string getCoords() __attribute__((weak));
    void setCoords(std::u16string coords) __attribute__((weak));
    std::u16string getShape() __attribute__((weak));
    void setShape(std::u16string shape) __attribute__((weak));
    std::u16string getHref() __attribute__((weak));
    void setHref(std::u16string href) __attribute__((weak));
    std::u16string getTarget() __attribute__((weak));
    void setTarget(std::u16string target) __attribute__((weak));
    std::u16string getRel() __attribute__((weak));
    void setRel(std::u16string rel) __attribute__((weak));
    DOMTokenList getRelList() __attribute__((weak));
    std::u16string getMedia() __attribute__((weak));
    void setMedia(std::u16string media) __attribute__((weak));
    std::u16string getHreflang() __attribute__((weak));
    void setHreflang(std::u16string hreflang) __attribute__((weak));
    std::u16string getType() __attribute__((weak));
    void setType(std::u16string type) __attribute__((weak));
    std::u16string getProtocol() __attribute__((weak));
    void setProtocol(std::u16string protocol) __attribute__((weak));
    std::u16string getHost() __attribute__((weak));
    void setHost(std::u16string host) __attribute__((weak));
    std::u16string getHostname() __attribute__((weak));
    void setHostname(std::u16string hostname) __attribute__((weak));
    std::u16string getPort() __attribute__((weak));
    void setPort(std::u16string port) __attribute__((weak));
    std::u16string getPathname() __attribute__((weak));
    void setPathname(std::u16string pathname) __attribute__((weak));
    std::u16string getSearch() __attribute__((weak));
    void setSearch(std::u16string search) __attribute__((weak));
    std::u16string getHash() __attribute__((weak));
    void setHash(std::u16string hash) __attribute__((weak));
    // HTMLAreaElement-5
    bool getNoHref() __attribute__((weak));
    void setNoHref(bool noHref) __attribute__((weak));
    // Object
    virtual Any message_(uint32_t selector, const char* id, int argc, Any* argv)
    {
        return html::HTMLAreaElement::dispatch(this, selector, id, argc, argv);
    }
    static const char* const getMetaData()
    {
        return html::HTMLAreaElement::getMetaData();
    }
    HTMLAreaElementImp(DocumentImp* ownerDocument) :
        ObjectMixin(ownerDocument, u"area") {
    }
    HTMLAreaElementImp(HTMLAreaElementImp* org, bool deep) :
        ObjectMixin(org, deep) {
    }
};

}
}
}
}

#endif  // ORG_W3C_DOM_BOOTSTRAP_HTMLAREAELEMENTIMP_H_INCLUDED

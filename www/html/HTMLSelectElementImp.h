// Generated by esidl (r1752).
// This file is expected to be modified for the Web IDL interface
// implementation.  Permission to use, copy, modify and distribute
// this file in any software license is hereby granted.

#ifndef ORG_W3C_DOM_BOOTSTRAP_HTMLSELECTELEMENTIMP_H_INCLUDED
#define ORG_W3C_DOM_BOOTSTRAP_HTMLSELECTELEMENTIMP_H_INCLUDED

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <org/w3c/dom/html/HTMLSelectElement.h>
#include "HTMLElementImp.h"

#include <org/w3c/dom/html/HTMLElement.h>
#include <org/w3c/dom/NodeList.h>
#include <org/w3c/dom/html/HTMLCollection.h>
#include <org/w3c/dom/html/HTMLOptionsCollection.h>
#include <org/w3c/dom/html/HTMLFormElement.h>
#include <org/w3c/dom/html/ValidityState.h>

namespace org
{
namespace w3c
{
namespace dom
{
namespace bootstrap
{
class HTMLSelectElementImp : public ObjectMixin<HTMLSelectElementImp, HTMLElementImp>
{
public:
    HTMLSelectElementImp(DocumentImp* ownerDocument) :
        ObjectMixin(ownerDocument, u"select") {
    }
    HTMLSelectElementImp(HTMLSelectElementImp* org, bool deep) :
        ObjectMixin(org, deep) {
    }

    // HTMLSelectElement
    bool getAutofocus();
    void setAutofocus(bool autofocus);
    bool getDisabled();
    void setDisabled(bool disabled);
    html::HTMLFormElement getForm();
    bool getMultiple();
    void setMultiple(bool multiple);
    std::u16string getName();
    void setName(std::u16string name);
    bool getRequired();
    void setRequired(bool required);
    unsigned int getSize();
    void setSize(unsigned int size);
    std::u16string getType();
    html::HTMLOptionsCollection getOptions();
    unsigned int getLength();
    void setLength(unsigned int length);
    Any item(unsigned int index);
    Any namedItem(std::u16string name);
    void add(html::HTMLElement element);
    void add(html::HTMLElement element, html::HTMLElement before);
    void add(html::HTMLElement element, int before);
    void remove(int index);
    html::HTMLCollection getSelectedOptions();
    int getSelectedIndex();
    void setSelectedIndex(int selectedIndex);
    std::u16string getValue();
    void setValue(std::u16string value);
    bool getWillValidate();
    html::ValidityState getValidity();
    std::u16string getValidationMessage();
    bool checkValidity();
    void setCustomValidity(std::u16string error);
    NodeList getLabels();
    // Object
    virtual Any message_(uint32_t selector, const char* id, int argc, Any* argv)
    {
        return html::HTMLSelectElement::dispatch(this, selector, id, argc, argv);
    }
    static const char* const getMetaData()
    {
        return html::HTMLSelectElement::getMetaData();
    }
};

}
}
}
}

#endif  // ORG_W3C_DOM_BOOTSTRAP_HTMLSELECTELEMENTIMP_H_INCLUDED

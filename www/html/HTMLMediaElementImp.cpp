// Generated by esidl (r1745).
// This file is expected to be modified for the Web IDL interface
// implementation.  Permission to use, copy, modify and distribute
// this file in any software license is hereby granted.

#include "HTMLMediaElementImp.h"

namespace org
{
namespace w3c
{
namespace dom
{
namespace bootstrap
{

html::MediaError HTMLMediaElementImp::getError()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

std::u16string HTMLMediaElementImp::getSrc()
{
    // TODO: implement me!
    return u"";
}

void HTMLMediaElementImp::setSrc(std::u16string src)
{
    // TODO: implement me!
}

std::u16string HTMLMediaElementImp::getCurrentSrc()
{
    // TODO: implement me!
    return u"";
}

unsigned short HTMLMediaElementImp::getNetworkState()
{
    // TODO: implement me!
    return 0;
}

std::u16string HTMLMediaElementImp::getPreload()
{
    // TODO: implement me!
    return u"";
}

void HTMLMediaElementImp::setPreload(std::u16string preload)
{
    // TODO: implement me!
}

html::TimeRanges HTMLMediaElementImp::getBuffered()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void HTMLMediaElementImp::load()
{
    // TODO: implement me!
}

std::u16string HTMLMediaElementImp::canPlayType(std::u16string type)
{
    // TODO: implement me!
    return u"";
}

unsigned short HTMLMediaElementImp::getReadyState()
{
    // TODO: implement me!
    return 0;
}

bool HTMLMediaElementImp::getSeeking()
{
    // TODO: implement me!
    return 0;
}

float HTMLMediaElementImp::getCurrentTime()
{
    // TODO: implement me!
    return 0;
}

void HTMLMediaElementImp::setCurrentTime(float currentTime)
{
    // TODO: implement me!
}

float HTMLMediaElementImp::getStartTime()
{
    // TODO: implement me!
    return 0;
}

float HTMLMediaElementImp::getDuration()
{
    // TODO: implement me!
    return 0;
}

bool HTMLMediaElementImp::getPaused()
{
    // TODO: implement me!
    return 0;
}

float HTMLMediaElementImp::getDefaultPlaybackRate()
{
    // TODO: implement me!
    return 0;
}

void HTMLMediaElementImp::setDefaultPlaybackRate(float defaultPlaybackRate)
{
    // TODO: implement me!
}

float HTMLMediaElementImp::getPlaybackRate()
{
    // TODO: implement me!
    return 0;
}

void HTMLMediaElementImp::setPlaybackRate(float playbackRate)
{
    // TODO: implement me!
}

html::TimeRanges HTMLMediaElementImp::getPlayed()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

html::TimeRanges HTMLMediaElementImp::getSeekable()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

bool HTMLMediaElementImp::getEnded()
{
    // TODO: implement me!
    return 0;
}

bool HTMLMediaElementImp::getAutoplay()
{
    // TODO: implement me!
    return 0;
}

void HTMLMediaElementImp::setAutoplay(bool autoplay)
{
    // TODO: implement me!
}

bool HTMLMediaElementImp::getLoop()
{
    // TODO: implement me!
    return 0;
}

void HTMLMediaElementImp::setLoop(bool loop)
{
    // TODO: implement me!
}

void HTMLMediaElementImp::play()
{
    // TODO: implement me!
}

void HTMLMediaElementImp::pause()
{
    // TODO: implement me!
}

bool HTMLMediaElementImp::getControls()
{
    // TODO: implement me!
    return 0;
}

void HTMLMediaElementImp::setControls(bool controls)
{
    // TODO: implement me!
}

float HTMLMediaElementImp::getVolume()
{
    // TODO: implement me!
    return 0;
}

void HTMLMediaElementImp::setVolume(float volume)
{
    // TODO: implement me!
}

bool HTMLMediaElementImp::getMuted()
{
    // TODO: implement me!
    return 0;
}

void HTMLMediaElementImp::setMuted(bool muted)
{
    // TODO: implement me!
}

}
}
}
}

// Generated by esidl (r1745).
// This file is expected to be modified for the Web IDL interface
// implementation.  Permission to use, copy, modify and distribute
// this file in any software license is hereby granted.

#ifndef ORG_W3C_DOM_BOOTSTRAP_HTMLOBJECTELEMENTIMP_H_INCLUDED
#define ORG_W3C_DOM_BOOTSTRAP_HTMLOBJECTELEMENTIMP_H_INCLUDED

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <org/w3c/dom/html/HTMLObjectElement.h>
#include "HTMLElementImp.h"

#include <org/w3c/dom/html/HTMLElement.h>
#include <org/w3c/dom/Document.h>
#include <org/w3c/dom/html/HTMLFormElement.h>
#include <org/w3c/dom/html/ValidityState.h>
#include <org/w3c/dom/html/Window.h>

namespace org
{
namespace w3c
{
namespace dom
{
namespace bootstrap
{
class HTMLObjectElementImp : public ObjectMixin<HTMLObjectElementImp, HTMLElementImp>
{
public:
    // HTMLObjectElement
    std::u16string getData() __attribute__((weak));
    void setData(std::u16string data) __attribute__((weak));
    std::u16string getType() __attribute__((weak));
    void setType(std::u16string type) __attribute__((weak));
    std::u16string getName() __attribute__((weak));
    void setName(std::u16string name) __attribute__((weak));
    std::u16string getUseMap() __attribute__((weak));
    void setUseMap(std::u16string useMap) __attribute__((weak));
    html::HTMLFormElement getForm() __attribute__((weak));
    std::u16string getWidth() __attribute__((weak));
    void setWidth(std::u16string width) __attribute__((weak));
    std::u16string getHeight() __attribute__((weak));
    void setHeight(std::u16string height) __attribute__((weak));
    Document getContentDocument() __attribute__((weak));
    html::Window getContentWindow() __attribute__((weak));
    bool getWillValidate() __attribute__((weak));
    html::ValidityState getValidity() __attribute__((weak));
    std::u16string getValidationMessage() __attribute__((weak));
    bool checkValidity() __attribute__((weak));
    void setCustomValidity(std::u16string error) __attribute__((weak));
    // HTMLObjectElement-24
    std::u16string getAlign() __attribute__((weak));
    void setAlign(std::u16string align) __attribute__((weak));
    std::u16string getArchive() __attribute__((weak));
    void setArchive(std::u16string archive) __attribute__((weak));
    std::u16string getBorder() __attribute__((weak));
    void setBorder(std::u16string border) __attribute__((weak));
    std::u16string getCode() __attribute__((weak));
    void setCode(std::u16string code) __attribute__((weak));
    std::u16string getCodeBase() __attribute__((weak));
    void setCodeBase(std::u16string codeBase) __attribute__((weak));
    std::u16string getCodeType() __attribute__((weak));
    void setCodeType(std::u16string codeType) __attribute__((weak));
    bool getDeclare() __attribute__((weak));
    void setDeclare(bool declare) __attribute__((weak));
    unsigned int getHspace() __attribute__((weak));
    void setHspace(unsigned int hspace) __attribute__((weak));
    std::u16string getStandby() __attribute__((weak));
    void setStandby(std::u16string standby) __attribute__((weak));
    unsigned int getVspace() __attribute__((weak));
    void setVspace(unsigned int vspace) __attribute__((weak));
    // Object
    virtual Any message_(uint32_t selector, const char* id, int argc, Any* argv)
    {
        return html::HTMLObjectElement::dispatch(this, selector, id, argc, argv);
    }
    static const char* const getMetaData()
    {
        return html::HTMLObjectElement::getMetaData();
    }
    HTMLObjectElementImp(DocumentImp* ownerDocument) :
        ObjectMixin(ownerDocument, u"object") {
    }
    HTMLObjectElementImp(HTMLObjectElementImp* org, bool deep) :
        ObjectMixin(org, deep) {
    }
};

}
}
}
}

#endif  // ORG_W3C_DOM_BOOTSTRAP_HTMLOBJECTELEMENTIMP_H_INCLUDED

// Generated by esidl (r1752).
// This file is expected to be modified for the Web IDL interface
// implementation.  Permission to use, copy, modify and distribute
// this file in any software license is hereby granted.

#ifndef ORG_W3C_DOM_BOOTSTRAP_HTMLOBJECTELEMENTIMP_H_INCLUDED
#define ORG_W3C_DOM_BOOTSTRAP_HTMLOBJECTELEMENTIMP_H_INCLUDED

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <org/w3c/dom/html/HTMLObjectElement.h>
#include "HTMLElementImp.h"

#include <org/w3c/dom/html/HTMLElement.h>
#include <org/w3c/dom/Document.h>
#include <org/w3c/dom/html/HTMLFormElement.h>
#include <org/w3c/dom/html/ValidityState.h>
#include <org/w3c/dom/html/Window.h>

namespace org
{
namespace w3c
{
namespace dom
{
namespace bootstrap
{
class HTMLObjectElementImp : public ObjectMixin<HTMLObjectElementImp, HTMLElementImp>
{
public:
    HTMLObjectElementImp(DocumentImp* ownerDocument) :
        ObjectMixin(ownerDocument, u"object") {
    }
    HTMLObjectElementImp(HTMLObjectElementImp* org, bool deep) :
        ObjectMixin(org, deep) {
    }

    // HTMLObjectElement
    std::u16string getData();
    void setData(std::u16string data);
    std::u16string getType();
    void setType(std::u16string type);
    bool getTypeMustMatch();
    void setTypeMustMatch(bool typeMustMatch);
    std::u16string getName();
    void setName(std::u16string name);
    std::u16string getUseMap();
    void setUseMap(std::u16string useMap);
    html::HTMLFormElement getForm();
    std::u16string getWidth();
    void setWidth(std::u16string width);
    std::u16string getHeight();
    void setHeight(std::u16string height);
    Document getContentDocument();
    html::Window getContentWindow();
    bool getWillValidate();
    html::ValidityState getValidity();
    std::u16string getValidationMessage();
    bool checkValidity();
    void setCustomValidity(std::u16string error);
    // HTMLObjectElement-27
    std::u16string getAlign();
    void setAlign(std::u16string align);
    std::u16string getArchive();
    void setArchive(std::u16string archive);
    std::u16string getBorder();
    void setBorder(std::u16string border);
    std::u16string getCode();
    void setCode(std::u16string code);
    std::u16string getCodeBase();
    void setCodeBase(std::u16string codeBase);
    std::u16string getCodeType();
    void setCodeType(std::u16string codeType);
    bool getDeclare();
    void setDeclare(bool declare);
    unsigned int getHspace();
    void setHspace(unsigned int hspace);
    std::u16string getStandby();
    void setStandby(std::u16string standby);
    unsigned int getVspace();
    void setVspace(unsigned int vspace);
    // Object
    virtual Any message_(uint32_t selector, const char* id, int argc, Any* argv)
    {
        return html::HTMLObjectElement::dispatch(this, selector, id, argc, argv);
    }
    static const char* const getMetaData()
    {
        return html::HTMLObjectElement::getMetaData();
    }
};

}
}
}
}

#endif  // ORG_W3C_DOM_BOOTSTRAP_HTMLOBJECTELEMENTIMP_H_INCLUDED

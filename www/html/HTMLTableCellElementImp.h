// Generated by esidl (r1745).
// This file is expected to be modified for the Web IDL interface
// implementation.  Permission to use, copy, modify and distribute
// this file in any software license is hereby granted.

#ifndef ORG_W3C_DOM_BOOTSTRAP_HTMLTABLECELLELEMENTIMP_H_INCLUDED
#define ORG_W3C_DOM_BOOTSTRAP_HTMLTABLECELLELEMENTIMP_H_INCLUDED

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <org/w3c/dom/html/HTMLTableCellElement.h>
#include "HTMLElementImp.h"

#include <org/w3c/dom/html/HTMLElement.h>
#include <org/w3c/dom/DOMSettableTokenList.h>

namespace org
{
namespace w3c
{
namespace dom
{
namespace bootstrap
{
class HTMLTableCellElementImp : public ObjectMixin<HTMLTableCellElementImp, HTMLElementImp>
{
public:
    // HTMLTableCellElement
    unsigned int getColSpan() __attribute__((weak));
    void setColSpan(unsigned int colSpan) __attribute__((weak));
    unsigned int getRowSpan() __attribute__((weak));
    void setRowSpan(unsigned int rowSpan) __attribute__((weak));
    DOMSettableTokenList getHeaders() __attribute__((weak));
    void setHeaders(std::u16string headers) __attribute__((weak));
    int getCellIndex() __attribute__((weak));
    // HTMLTableCellElement-32
    std::u16string getAbbr() __attribute__((weak));
    void setAbbr(std::u16string abbr) __attribute__((weak));
    std::u16string getAlign() __attribute__((weak));
    void setAlign(std::u16string align) __attribute__((weak));
    std::u16string getAxis() __attribute__((weak));
    void setAxis(std::u16string axis) __attribute__((weak));
    std::u16string getBgColor() __attribute__((weak));
    void setBgColor(std::u16string bgColor) __attribute__((weak));
    std::u16string getCh() __attribute__((weak));
    void setCh(std::u16string ch) __attribute__((weak));
    std::u16string getChOff() __attribute__((weak));
    void setChOff(std::u16string chOff) __attribute__((weak));
    std::u16string getHeight() __attribute__((weak));
    void setHeight(std::u16string height) __attribute__((weak));
    bool getNoWrap() __attribute__((weak));
    void setNoWrap(bool noWrap) __attribute__((weak));
    std::u16string getVAlign() __attribute__((weak));
    void setVAlign(std::u16string vAlign) __attribute__((weak));
    std::u16string getWidth() __attribute__((weak));
    void setWidth(std::u16string width) __attribute__((weak));
    // Object
    virtual Any message_(uint32_t selector, const char* id, int argc, Any* argv)
    {
        return html::HTMLTableCellElement::dispatch(this, selector, id, argc, argv);
    }
    static const char* const getMetaData()
    {
        return html::HTMLTableCellElement::getMetaData();
    }
    HTMLTableCellElementImp(DocumentImp* ownerDocument, const std::u16string& localName) :
        ObjectMixin(ownerDocument, localName) {
    }
    HTMLTableCellElementImp(HTMLTableCellElementImp* org, bool deep) :
        ObjectMixin(org, deep) {
    }
};

}
}
}
}

#endif  // ORG_W3C_DOM_BOOTSTRAP_HTMLTABLECELLELEMENTIMP_H_INCLUDED

// Generated by esidl (r1745).
// This file is expected to be modified for the Web IDL interface
// implementation.  Permission to use, copy, modify and distribute
// this file in any software license is hereby granted.

#include "CanvasRenderingContext2DImp.h"

namespace org
{
namespace w3c
{
namespace dom
{
namespace bootstrap
{

html::HTMLCanvasElement CanvasRenderingContext2DImp::getCanvas()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void CanvasRenderingContext2DImp::save()
{
    // TODO: implement me!
}

void CanvasRenderingContext2DImp::restore()
{
    // TODO: implement me!
}

void CanvasRenderingContext2DImp::scale(float x, float y)
{
    // TODO: implement me!
}

void CanvasRenderingContext2DImp::rotate(float angle)
{
    // TODO: implement me!
}

void CanvasRenderingContext2DImp::translate(float x, float y)
{
    // TODO: implement me!
}

void CanvasRenderingContext2DImp::transform(float m11, float m12, float m21, float m22, float dx, float dy)
{
    // TODO: implement me!
}

void CanvasRenderingContext2DImp::setTransform(float m11, float m12, float m21, float m22, float dx, float dy)
{
    // TODO: implement me!
}

float CanvasRenderingContext2DImp::getGlobalAlpha()
{
    // TODO: implement me!
    return 0;
}

void CanvasRenderingContext2DImp::setGlobalAlpha(float globalAlpha)
{
    // TODO: implement me!
}

std::u16string CanvasRenderingContext2DImp::getGlobalCompositeOperation()
{
    // TODO: implement me!
    return u"";
}

void CanvasRenderingContext2DImp::setGlobalCompositeOperation(std::u16string globalCompositeOperation)
{
    // TODO: implement me!
}

Any CanvasRenderingContext2DImp::getStrokeStyle()
{
    // TODO: implement me!
    return 0;
}

void CanvasRenderingContext2DImp::setStrokeStyle(Any strokeStyle)
{
    // TODO: implement me!
}

Any CanvasRenderingContext2DImp::getFillStyle()
{
    // TODO: implement me!
    return 0;
}

void CanvasRenderingContext2DImp::setFillStyle(Any fillStyle)
{
    // TODO: implement me!
}

html::CanvasGradient CanvasRenderingContext2DImp::createLinearGradient(float x0, float y0, float x1, float y1)
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

html::CanvasGradient CanvasRenderingContext2DImp::createRadialGradient(float x0, float y0, float r0, float x1, float y1, float r1)
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

html::CanvasPattern CanvasRenderingContext2DImp::createPattern(html::HTMLImageElement image, std::u16string repetition)
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

html::CanvasPattern CanvasRenderingContext2DImp::createPattern(html::HTMLCanvasElement image, std::u16string repetition)
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

html::CanvasPattern CanvasRenderingContext2DImp::createPattern(html::HTMLVideoElement image, std::u16string repetition)
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

float CanvasRenderingContext2DImp::getLineWidth()
{
    // TODO: implement me!
    return 0;
}

void CanvasRenderingContext2DImp::setLineWidth(float lineWidth)
{
    // TODO: implement me!
}

std::u16string CanvasRenderingContext2DImp::getLineCap()
{
    // TODO: implement me!
    return u"";
}

void CanvasRenderingContext2DImp::setLineCap(std::u16string lineCap)
{
    // TODO: implement me!
}

std::u16string CanvasRenderingContext2DImp::getLineJoin()
{
    // TODO: implement me!
    return u"";
}

void CanvasRenderingContext2DImp::setLineJoin(std::u16string lineJoin)
{
    // TODO: implement me!
}

float CanvasRenderingContext2DImp::getMiterLimit()
{
    // TODO: implement me!
    return 0;
}

void CanvasRenderingContext2DImp::setMiterLimit(float miterLimit)
{
    // TODO: implement me!
}

float CanvasRenderingContext2DImp::getShadowOffsetX()
{
    // TODO: implement me!
    return 0;
}

void CanvasRenderingContext2DImp::setShadowOffsetX(float shadowOffsetX)
{
    // TODO: implement me!
}

float CanvasRenderingContext2DImp::getShadowOffsetY()
{
    // TODO: implement me!
    return 0;
}

void CanvasRenderingContext2DImp::setShadowOffsetY(float shadowOffsetY)
{
    // TODO: implement me!
}

float CanvasRenderingContext2DImp::getShadowBlur()
{
    // TODO: implement me!
    return 0;
}

void CanvasRenderingContext2DImp::setShadowBlur(float shadowBlur)
{
    // TODO: implement me!
}

std::u16string CanvasRenderingContext2DImp::getShadowColor()
{
    // TODO: implement me!
    return u"";
}

void CanvasRenderingContext2DImp::setShadowColor(std::u16string shadowColor)
{
    // TODO: implement me!
}

void CanvasRenderingContext2DImp::clearRect(float x, float y, float w, float h)
{
    // TODO: implement me!
}

void CanvasRenderingContext2DImp::fillRect(float x, float y, float w, float h)
{
    // TODO: implement me!
}

void CanvasRenderingContext2DImp::strokeRect(float x, float y, float w, float h)
{
    // TODO: implement me!
}

void CanvasRenderingContext2DImp::beginPath()
{
    // TODO: implement me!
}

void CanvasRenderingContext2DImp::closePath()
{
    // TODO: implement me!
}

void CanvasRenderingContext2DImp::moveTo(float x, float y)
{
    // TODO: implement me!
}

void CanvasRenderingContext2DImp::lineTo(float x, float y)
{
    // TODO: implement me!
}

void CanvasRenderingContext2DImp::quadraticCurveTo(float cpx, float cpy, float x, float y)
{
    // TODO: implement me!
}

void CanvasRenderingContext2DImp::bezierCurveTo(float cp1x, float cp1y, float cp2x, float cp2y, float x, float y)
{
    // TODO: implement me!
}

void CanvasRenderingContext2DImp::arcTo(float x1, float y1, float x2, float y2, float radius)
{
    // TODO: implement me!
}

void CanvasRenderingContext2DImp::rect(float x, float y, float w, float h)
{
    // TODO: implement me!
}

void CanvasRenderingContext2DImp::arc(float x, float y, float radius, float startAngle, float endAngle, bool anticlockwise)
{
    // TODO: implement me!
}

void CanvasRenderingContext2DImp::fill()
{
    // TODO: implement me!
}

void CanvasRenderingContext2DImp::stroke()
{
    // TODO: implement me!
}

void CanvasRenderingContext2DImp::clip()
{
    // TODO: implement me!
}

bool CanvasRenderingContext2DImp::isPointInPath(float x, float y)
{
    // TODO: implement me!
    return 0;
}

bool CanvasRenderingContext2DImp::drawFocusRing(Element element, float xCaret, float yCaret)
{
    // TODO: implement me!
    return 0;
}

bool CanvasRenderingContext2DImp::drawFocusRing(Element element, float xCaret, float yCaret, bool canDrawCustom)
{
    // TODO: implement me!
    return 0;
}

std::u16string CanvasRenderingContext2DImp::getFont()
{
    // TODO: implement me!
    return u"";
}

void CanvasRenderingContext2DImp::setFont(std::u16string font)
{
    // TODO: implement me!
}

std::u16string CanvasRenderingContext2DImp::getTextAlign()
{
    // TODO: implement me!
    return u"";
}

void CanvasRenderingContext2DImp::setTextAlign(std::u16string textAlign)
{
    // TODO: implement me!
}

std::u16string CanvasRenderingContext2DImp::getTextBaseline()
{
    // TODO: implement me!
    return u"";
}

void CanvasRenderingContext2DImp::setTextBaseline(std::u16string textBaseline)
{
    // TODO: implement me!
}

void CanvasRenderingContext2DImp::fillText(std::u16string text, float x, float y)
{
    // TODO: implement me!
}

void CanvasRenderingContext2DImp::fillText(std::u16string text, float x, float y, float maxWidth)
{
    // TODO: implement me!
}

void CanvasRenderingContext2DImp::strokeText(std::u16string text, float x, float y)
{
    // TODO: implement me!
}

void CanvasRenderingContext2DImp::strokeText(std::u16string text, float x, float y, float maxWidth)
{
    // TODO: implement me!
}

html::TextMetrics CanvasRenderingContext2DImp::measureText(std::u16string text)
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void CanvasRenderingContext2DImp::drawImage(html::HTMLImageElement image, float dx, float dy)
{
    // TODO: implement me!
}

void CanvasRenderingContext2DImp::drawImage(html::HTMLImageElement image, float dx, float dy, float dw, float dh)
{
    // TODO: implement me!
}

void CanvasRenderingContext2DImp::drawImage(html::HTMLImageElement image, float sx, float sy, float sw, float sh, float dx, float dy, float dw, float dh)
{
    // TODO: implement me!
}

void CanvasRenderingContext2DImp::drawImage(html::HTMLCanvasElement image, float dx, float dy)
{
    // TODO: implement me!
}

void CanvasRenderingContext2DImp::drawImage(html::HTMLCanvasElement image, float dx, float dy, float dw, float dh)
{
    // TODO: implement me!
}

void CanvasRenderingContext2DImp::drawImage(html::HTMLCanvasElement image, float sx, float sy, float sw, float sh, float dx, float dy, float dw, float dh)
{
    // TODO: implement me!
}

void CanvasRenderingContext2DImp::drawImage(html::HTMLVideoElement image, float dx, float dy)
{
    // TODO: implement me!
}

void CanvasRenderingContext2DImp::drawImage(html::HTMLVideoElement image, float dx, float dy, float dw, float dh)
{
    // TODO: implement me!
}

void CanvasRenderingContext2DImp::drawImage(html::HTMLVideoElement image, float sx, float sy, float sw, float sh, float dx, float dy, float dw, float dh)
{
    // TODO: implement me!
}

html::ImageData CanvasRenderingContext2DImp::createImageData(float sw, float sh)
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

html::ImageData CanvasRenderingContext2DImp::createImageData(html::ImageData imagedata)
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

html::ImageData CanvasRenderingContext2DImp::getImageData(float sx, float sy, float sw, float sh)
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void CanvasRenderingContext2DImp::putImageData(html::ImageData imagedata, float dx, float dy)
{
    // TODO: implement me!
}

void CanvasRenderingContext2DImp::putImageData(html::ImageData imagedata, float dx, float dy, float dirtyX, float dirtyY, float dirtyWidth, float dirtyHeight)
{
    // TODO: implement me!
}

}
}
}
}

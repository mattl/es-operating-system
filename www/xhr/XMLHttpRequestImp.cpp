// Generated by esidl (r1745).
// This file is expected to be modified for the Web IDL interface
// implementation.  Permission to use, copy, modify and distribute
// this file in any software license is hereby granted.

#include "XMLHttpRequestImp.h"

namespace org
{
namespace w3c
{
namespace dom
{
namespace bootstrap
{

html::Function XMLHttpRequestImp::getOnreadystatechange()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void XMLHttpRequestImp::setOnreadystatechange(html::Function onreadystatechange)
{
    // TODO: implement me!
}

unsigned short XMLHttpRequestImp::getReadyState()
{
    // TODO: implement me!
    return 0;
}

void XMLHttpRequestImp::open(std::u16string method, std::u16string url)
{
    // TODO: implement me!
}

void XMLHttpRequestImp::open(std::u16string method, std::u16string url, bool async)
{
    // TODO: implement me!
}

void XMLHttpRequestImp::open(std::u16string method, std::u16string url, bool async, Nullable<std::u16string> user)
{
    // TODO: implement me!
}

void XMLHttpRequestImp::open(std::u16string method, std::u16string url, bool async, Nullable<std::u16string> user, Nullable<std::u16string> password)
{
    // TODO: implement me!
}

void XMLHttpRequestImp::setRequestHeader(std::u16string header, std::u16string value)
{
    // TODO: implement me!
}

unsigned int XMLHttpRequestImp::getTimeout()
{
    // TODO: implement me!
    return 0;
}

void XMLHttpRequestImp::setTimeout(unsigned int timeout)
{
    // TODO: implement me!
}

bool XMLHttpRequestImp::getWithCredentials()
{
    // TODO: implement me!
    return 0;
}

void XMLHttpRequestImp::setWithCredentials(bool withCredentials)
{
    // TODO: implement me!
}

XMLHttpRequestUpload XMLHttpRequestImp::getUpload()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

void XMLHttpRequestImp::send()
{
    // TODO: implement me!
}

void XMLHttpRequestImp::send(typedarray::ArrayBuffer data)
{
    // TODO: implement me!
}

void XMLHttpRequestImp::send(file::Blob data)
{
    // TODO: implement me!
}

void XMLHttpRequestImp::send(Document data)
{
    // TODO: implement me!
}

void XMLHttpRequestImp::send(FormData data)
{
    // TODO: implement me!
}

void XMLHttpRequestImp::send(Nullable<std::u16string> data)
{
    // TODO: implement me!
}

void XMLHttpRequestImp::abort()
{
    // TODO: implement me!
}

unsigned short XMLHttpRequestImp::getStatus()
{
    // TODO: implement me!
    return 0;
}

std::u16string XMLHttpRequestImp::getStatusText()
{
    // TODO: implement me!
    return u"";
}

std::u16string XMLHttpRequestImp::getResponseHeader(std::u16string header)
{
    // TODO: implement me!
    return u"";
}

std::u16string XMLHttpRequestImp::getAllResponseHeaders()
{
    // TODO: implement me!
    return u"";
}

void XMLHttpRequestImp::overrideMimeType(std::u16string mime)
{
    // TODO: implement me!
}

std::u16string XMLHttpRequestImp::getResponseType()
{
    // TODO: implement me!
    return u"";
}

void XMLHttpRequestImp::setResponseType(std::u16string responseType)
{
    // TODO: implement me!
}

Any XMLHttpRequestImp::getResponse()
{
    // TODO: implement me!
    return 0;
}

std::u16string XMLHttpRequestImp::getResponseText()
{
    // TODO: implement me!
    return u"";
}

Document XMLHttpRequestImp::getResponseXML()
{
    // TODO: implement me!
    return static_cast<Object*>(0);
}

}
}
}
}

// Generated by esidl (r1745).
// This file is expected to be modified for the Web IDL interface
// implementation.  Permission to use, copy, modify and distribute
// this file in any software license is hereby granted.

#ifndef ORG_W3C_DOM_BOOTSTRAP_XMLHTTPREQUESTIMP_H_INCLUDED
#define ORG_W3C_DOM_BOOTSTRAP_XMLHTTPREQUESTIMP_H_INCLUDED

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <org/w3c/dom/XMLHttpRequest.h>
#include "XMLHttpRequestEventTargetImp.h"

#include <org/w3c/dom/Document.h>
#include <org/w3c/dom/file/Blob.h>
#include <org/w3c/dom/html/Function.h>
#include <org/w3c/dom/typedarray/ArrayBuffer.h>
#include <org/w3c/dom/XMLHttpRequestEventTarget.h>
#include <org/w3c/dom/XMLHttpRequestUpload.h>
#include <org/w3c/dom/XMLHttpRequest.h>
#include <org/w3c/dom/FormData.h>

namespace org
{
namespace w3c
{
namespace dom
{
namespace bootstrap
{
class XMLHttpRequestImp : public ObjectMixin<XMLHttpRequestImp, XMLHttpRequestEventTargetImp>
{
public:
    // XMLHttpRequest
    html::Function getOnreadystatechange() __attribute__((weak));
    void setOnreadystatechange(html::Function onreadystatechange) __attribute__((weak));
    unsigned short getReadyState() __attribute__((weak));
    void open(std::u16string method, std::u16string url) __attribute__((weak));
    void open(std::u16string method, std::u16string url, bool async) __attribute__((weak));
    void open(std::u16string method, std::u16string url, bool async, Nullable<std::u16string> user) __attribute__((weak));
    void open(std::u16string method, std::u16string url, bool async, Nullable<std::u16string> user, Nullable<std::u16string> password) __attribute__((weak));
    void setRequestHeader(std::u16string header, std::u16string value) __attribute__((weak));
    unsigned int getTimeout() __attribute__((weak));
    void setTimeout(unsigned int timeout) __attribute__((weak));
    bool getWithCredentials() __attribute__((weak));
    void setWithCredentials(bool withCredentials) __attribute__((weak));
    XMLHttpRequestUpload getUpload() __attribute__((weak));
    void send() __attribute__((weak));
    void send(typedarray::ArrayBuffer data) __attribute__((weak));
    void send(file::Blob data) __attribute__((weak));
    void send(Document data) __attribute__((weak));
    void send(FormData data) __attribute__((weak));
    void send(Nullable<std::u16string> data) __attribute__((weak));
    void abort() __attribute__((weak));
    unsigned short getStatus() __attribute__((weak));
    std::u16string getStatusText() __attribute__((weak));
    std::u16string getResponseHeader(std::u16string header) __attribute__((weak));
    std::u16string getAllResponseHeaders() __attribute__((weak));
    void overrideMimeType(std::u16string mime) __attribute__((weak));
    std::u16string getResponseType() __attribute__((weak));
    void setResponseType(std::u16string responseType) __attribute__((weak));
    Any getResponse() __attribute__((weak));
    std::u16string getResponseText() __attribute__((weak));
    Document getResponseXML() __attribute__((weak));
    // Object
    virtual Any message_(uint32_t selector, const char* id, int argc, Any* argv)
    {
        return XMLHttpRequest::dispatch(this, selector, id, argc, argv);
    }
    static const char* const getMetaData()
    {
        return XMLHttpRequest::getMetaData();
    }
};

}
}
}
}

#endif  // ORG_W3C_DOM_BOOTSTRAP_XMLHTTPREQUESTIMP_H_INCLUDED

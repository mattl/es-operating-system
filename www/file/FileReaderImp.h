// Generated by esidl (r1745).
// This file is expected to be modified for the Web IDL interface
// implementation.  Permission to use, copy, modify and distribute
// this file in any software license is hereby granted.

#ifndef ORG_W3C_DOM_BOOTSTRAP_FILEREADERIMP_H_INCLUDED
#define ORG_W3C_DOM_BOOTSTRAP_FILEREADERIMP_H_INCLUDED

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <org/w3c/dom/file/FileReader.h>
#include "EventTargetImp.h"

#include <org/w3c/dom/events/EventTarget.h>
#include <org/w3c/dom/file/Blob.h>
#include <org/w3c/dom/file/FileReader.h>
#include <org/w3c/dom/file/FileError.h>
#include <org/w3c/dom/html/Function.h>

namespace org
{
namespace w3c
{
namespace dom
{
namespace bootstrap
{
class FileReaderImp : public ObjectMixin<FileReaderImp, EventTargetImp>
{
public:
    // FileReader
    void readAsArrayBuffer(file::Blob blob) __attribute__((weak));
    void readAsBinaryString(file::Blob blob) __attribute__((weak));
    void readAsText(file::Blob blob) __attribute__((weak));
    void readAsText(file::Blob blob, std::u16string encoding) __attribute__((weak));
    void readAsDataURL(file::Blob blob) __attribute__((weak));
    void abort() __attribute__((weak));
    unsigned short getReadyState() __attribute__((weak));
    Any getResult() __attribute__((weak));
    file::FileError getError() __attribute__((weak));
    html::Function getOnloadstart() __attribute__((weak));
    void setOnloadstart(html::Function onloadstart) __attribute__((weak));
    html::Function getOnprogress() __attribute__((weak));
    void setOnprogress(html::Function onprogress) __attribute__((weak));
    html::Function getOnload() __attribute__((weak));
    void setOnload(html::Function onload) __attribute__((weak));
    html::Function getOnabort() __attribute__((weak));
    void setOnabort(html::Function onabort) __attribute__((weak));
    html::Function getOnerror() __attribute__((weak));
    void setOnerror(html::Function onerror) __attribute__((weak));
    html::Function getOnloadend() __attribute__((weak));
    void setOnloadend(html::Function onloadend) __attribute__((weak));
    // Object
    virtual Any message_(uint32_t selector, const char* id, int argc, Any* argv)
    {
        return file::FileReader::dispatch(this, selector, id, argc, argv);
    }
    static const char* const getMetaData()
    {
        return file::FileReader::getMetaData();
    }
};

}
}
}
}

#endif  // ORG_W3C_DOM_BOOTSTRAP_FILEREADERIMP_H_INCLUDED

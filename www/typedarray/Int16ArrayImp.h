// Generated by esidl (r1745).
// This file is expected to be modified for the Web IDL interface
// implementation.  Permission to use, copy, modify and distribute
// this file in any software license is hereby granted.

#ifndef ORG_W3C_DOM_BOOTSTRAP_INT16ARRAYIMP_H_INCLUDED
#define ORG_W3C_DOM_BOOTSTRAP_INT16ARRAYIMP_H_INCLUDED

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <org/w3c/dom/typedarray/Int16Array.h>
#include "ArrayBufferViewImp.h"

#include <org/w3c/dom/typedarray/ArrayBuffer.h>
#include <org/w3c/dom/typedarray/ArrayBufferView.h>
#include <org/w3c/dom/typedarray/Int16Array.h>

namespace org
{
namespace w3c
{
namespace dom
{
namespace bootstrap
{
class Int16ArrayImp : public ObjectMixin<Int16ArrayImp, ArrayBufferViewImp>
{
public:
    // Int16Array
    unsigned int getLength() __attribute__((weak));
    short get(unsigned int index) __attribute__((weak));
    void set(unsigned int index, short value) __attribute__((weak));
    void set(typedarray::Int16Array array) __attribute__((weak));
    void set(typedarray::Int16Array array, unsigned int offset) __attribute__((weak));
    void set(ObjectArray<short> array) __attribute__((weak));
    void set(ObjectArray<short> array, unsigned int offset) __attribute__((weak));
    typedarray::Int16Array subarray(int start, int end) __attribute__((weak));
    // Object
    virtual Any message_(uint32_t selector, const char* id, int argc, Any* argv)
    {
        return typedarray::Int16Array::dispatch(this, selector, id, argc, argv);
    }
    static const char* const getMetaData()
    {
        return typedarray::Int16Array::getMetaData();
    }
};

}
}
}
}

#endif  // ORG_W3C_DOM_BOOTSTRAP_INT16ARRAYIMP_H_INCLUDED

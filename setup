#!/bin/bash -v

# function to manually copy files if wget fails
manual_input()
{
    echo -n "'$1' failed. Manually enter path for $2: "
    read path
    if [ "$path" ]
    then
            # currently in src/. Copy here.
      	    cp $path/$2 .
	    estatus=$?
 	    [ $estatus != 0 ] && exit $estatus
    else
	    exit 1
    fi
}

dist_dir=$(expr substr $0 1 $(expr $(expr length $0) - 5))

# Check prerequisites
if which yum 
then
	sudo yum install autoconf automake bison boost-devel boost-iostreams boost-regex boost-system cairo-devel flex freeglut-devel freetype-devel gcc-c++ glibc gmp-devel gperf js-devel v8-devel libX11-devel libXi-devel libXmu-devel libicu-devel libjpeg-devel libmpc-devel libpng-devel libtool mpfr-devel patch pcre-devel qemu re2c sazanami-fonts-gothic sazanami-fonts-mincho subversion texinfo
elif which apt-get
then
	sudo apt-get install autoconf automake bison flex freeglut3-dev g++ gcc gperf libX11-dev libboost-dev libboost-iostreams-dev libboost-regex-dev libboost-system-dev libc6-dev libcairo2-dev libfreetype6-dev libicu-dev libjpeg-dev libmozjs-dev libmpc-dev libmpfr-dev libpcre3-dev libpng-dev libtool libv8-dev libxi-dev libxmu-dev patch qemu re2c subversion texinfo ttf-liberation ttf-sazanami-gothic ttf-sazanami-mincho
elif which pacman # Arch Linux
then
  sys_arch=$(arch)
  case $sys_arch in
    "x86_64") # Install multilib pacakges
      sudo pacman -S --needed autoconf automake bison flex freeglut gcc-multilib gperf libx11 boost boost-libs gcc-libs-multilib cairo freetype2 icu libjpeg-turbo js libmpc mpfr pcre libpng libtool-multilib libxi libxmu patch qemu-kvm re2c subversion texinfo ttf-liberation ttf-sazanami
      ;;
    "i686")
      sudo pacman -S --needed autoconf automake bison flex freeglut gcc gperf libx11 boost boost-libs glibc cairo freetype2 icu libjpeg-turbo js libmpc mpfr pcre libpng libtool libxi libxmu patch qemu-kvm re2c subversion texinfo ttf-liberation ttf-sazanami
      ;;
    *)
      echo 'Unknown architecture of Arch Linux.'
      exit 1
      ;;
  esac
else
	echo 'Your OS is probably not a supported development environment.'
	exit 1
fi

if [ -z "$ES_SDK" ];
then
export ES_SDK=`pwd`/sdk
fi

if [ -z "$PKG_CONFIG_PATH"];
then
export PKG_CONFIG_PATH=$ES_SDK/lib/pkgconfig
fi

mkdir -p $ES_SDK
mkdir -p src
mkdir -p opt

# Check whether $ES_SDK/bin is contained in PATH
# if not append the path to ~/.bashrc

echo $PATH | grep -q "$ES_SDK/bin"
if [ $? != 0 ]
then
	export PATH=$PATH:$ES_SDK/bin
	# Check whether already appended in ~/.bashrc
	grep -q "# Added by es install" ~/.bashrc
	if [ $? != 0 ]
  	then
		echo -n "Add export statement to ~/.bashrc [y|n]? "
		read input
		if [ $input == "y" -o $input == "Y" ]
		then
			echo "# Added by es install" >> ~/.bashrc
   			echo "export PATH=\$PATH:$ES_SDK/bin" >> ~/.bashrc
  		fi
	fi
fi


if [ -e $dist_dir/configure ];
then
	# Setup from the distribution
	if [ ! -e trunk ];
	then
		ln -s $dist_dir trunk
	fi
elif [ ! -d trunk ]; 
then 
	# Check out the source code from Google Code
	mkdir trunk
	if [ -z $GOOGLE_USERNAME ]; 
	then
		svn checkout http://es-operating-system.googlecode.com/svn/trunk/ trunk
	else
		svn checkout https://es-operating-system.googlecode.com/svn/trunk/ trunk --username $GOOGLE_USERNAME
	fi
	for i in trunk trunk/tools trunk/os trunk/init trunk/cmd trunk/esjs
	do 
		(cd $i; aclocal; autoconf; automake -a --foreign)
	done
	for i in trunk/esidl
	do 
		(cd $i; aclocal; autoconf; libtoolize --force; automake -a --foreign)
	done
else
	cd trunk
	svn update
	cd ..
fi

# Building development tools
if [ ! -d local ]; 
then
	mkdir local
	cd local
	CFLAGS=-g CXXFLAGS=-g ../trunk/configure --prefix=$ES_SDK --libdir=$ES_SDK/lib.local
else
	cd local
fi
make
estatus=$?
[ $estatus != 0 ] && exit $estatus
make install-exec
estatus=$?
[ $estatus != 0 ] && exit $estatus
cd ..

# Binutils
if [ ! -f src/binutils-2.21.1.tar.bz2 ];
then
	cd src
	wget ftp://ftp.gnu.org/gnu/binutils/binutils-2.21.1.tar.bz2
	[ $? != 0 ] && manual_input "wget ftp" "binutils-2.21.1.tar.bz2"
	cd ..
fi
if [ ! -d src/binutils-2.21.1 ] || [ ! -f opt/binutils/Makefile ] || [ -n "`find trunk/patches/binutils-2.21.1.patch -newer opt/binutils/Makefile -print`" ];
then
	cd src
	rm -rf binutils-2.21.1
	tar -jxf binutils-2.21.1.tar.bz2
	patch -p0 -d . < ../trunk/patches/binutils-2.21.1.patch
	cd ..
fi
cd opt
mkdir -p binutils
cd binutils
if [ ! -f Makefile ] || [ -n "`find ../../trunk/patches/binutils-2.21.1.patch -newer Makefile -print`" ];
then
	../../src/binutils-2.21.1/configure --target=i386-pc-es --prefix=$ES_SDK
	make
	estatus=$?
	[ $estatus != 0 ] && exit $estatus
	make install
	estatus=$?
	[ $estatus != 0 ] && exit $estatus
fi
cd ../..

# GCC and Newlib
if [ ! -f src/gcc-4.6.1.tar.bz2 ]; 
then
	cd src
	wget ftp://ftp.gnu.org/gnu/gcc/gcc-4.6.1/gcc-4.6.1.tar.bz2
	[ $? != 0 ] && manual_input "wget ftp" "gcc-4.6.1.tar.bz2"
	cd ..
fi
if [ ! -d src/gcc-4.6.1 ] || [ ! -f opt/gcc/Makefile ] || [ -n "`find trunk/patches/gcc-4.6.1.patch -newer opt/gcc/Makefile -print`" ];
then
	cd src
	rm -rf gcc-4.6.1
	tar -jxf gcc-4.6.1.tar.bz2
	patch -p0 -d . < ../trunk/patches/gcc-4.6.1.patch
	cd ..
fi
if [ ! -f src/newlib-1.16.0.tar.gz ]; 
then
	cd src
	wget ftp://sources.redhat.com/pub/newlib/newlib-1.16.0.tar.gz
	[ $? != 0 ] && manual_input "wget ftp" "newlib-1.16.0.tar.gz"
	cd ..
fi
if [ ! -d src/newlib-1.16.0 ] || [ ! -f opt/gcc/Makefile ] || [ -n "`find trunk/patches/newlib-1.16.0.patch -newer opt/gcc/Makefile -print`" ];
then
	cd src
	rm -rf newlib-1.16.0
	tar -zxf newlib-1.16.0.tar.gz
	patch -p0 -d . < ../trunk/patches/newlib-1.16.0.patch
	cd ..
fi
cd src/gcc-4.6.1
ln -fs ../newlib-1.16.0/newlib .
ln -fs ../newlib-1.16.0/libgloss .
cd ../../opt
mkdir -p gcc
cd gcc
if [ ! -f Makefile ] || [ -n "`find ../../trunk/patches/gcc-4.6.1.patch -newer Makefile -print`" ] || [ -n "`find ../../trunk/patches/newlib-1.16.0.patch -newer Makefile -print`" ];
then
	../../src/gcc-4.6.1/configure --target=i386-pc-es --enable-threads --enable-languages=c,c++ --with-gnu-as --with-gnu-ld --with-newlib --with-gmp=/usr --with-mpfr=/usr --disable-shared --prefix=$ES_SDK
	make
	estatus=$?
	[ $estatus != 0 ] && exit $estatus
	make install
	estatus=$?
	[ $estatus != 0 ] && exit $estatus
fi
cd ../..

# PCRE
cd src
if [ ! -f pcre-8.30.tar.bz2 ]; 
then
	wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.30.tar.bz2
	[ $? != 0 ] && manual_input "wget ftp" "pcre-8.30.tar.bz2"
fi
rm -rf pcre-8.30
tar -jxf pcre-8.30.tar.bz2
patch -p0 -d . < ../trunk/patches/pcre-8.30.patch
cd ../opt
mkdir -p pcre
cd pcre
if [ ! -f Makefile ] || [ -n "`find ../../trunk/patches/pcre-8.30.patch -newer Makefile -print`" ];
then
	../../src/pcre-8.30/configure --prefix=$ES_SDK --disable-shared --enable-utf8 --enable-unicode-properties --host=i386-pc-es --target=i386-pc-es --program-prefix=es-
	make
	estatus=$?
	[ $estatus != 0 ] && exit $estatus
	make install
	estatus=$?
	[ $estatus != 0 ] && exit $estatus
fi
cd ../..

# FreeType 2
cd src
if [ ! -f freetype-2.3.5.tar.bz2 ]; 
then
	wget http://ftp.twaren.net/Unix/NonGNU/freetype/freetype-2.3.5.tar.bz2
	[ $? != 0 ] && manual_input "wget http" "freetype-2.3.5.tar.bz2"
fi
rm -rf freetype-2.3.5
tar -jxf freetype-2.3.5.tar.bz2
patch -p0 -d . < ../trunk/patches/freetype-2.3.5.patch
cd ../opt
mkdir -p freetype
cd freetype
if [ ! -f Makefile ] || [ -n "`find ../../trunk/patches/freetype-2.3.5.patch -newer Makefile -print`" ];
then
	CC_BUILD=gcc ../../src/freetype-2.3.5/configure --prefix=$ES_SDK --host=i386-pc-es --target=i386-pc-es
	make FTSYS_SRC=../../src/freetype-2.3.5/builds/unix/ftsystem.c
	estatus=$?
	[ $estatus != 0 ] && exit $estatus
	make install
	estatus=$?
	[ $estatus != 0 ] && exit $estatus
	mv $ES_SDK/bin/freetype-config $ES_SDK/bin/es-freetype-config
fi
cd ../..

# Expat
cd src
if [ ! -f expat-2.0.1.tar.gz ]; 
then
	wget http://downloads.sourceforge.net/project/expat/expat/2.0.1/expat-2.0.1.tar.gz
	[ $? != 0 ] && manual_input "wget http" "expat-2.0.1.tar.gz"
fi
rm -rf expat-2.0.1
tar -zxf expat-2.0.1.tar.gz
patch -p0 -d . < ../trunk/patches/expat-2.0.1.patch
cd ../opt
mkdir -p expat
cd expat
if [ ! -f Makefile ] || [ -n "`find ../../trunk/patches/expat-2.0.1.patch -newer Makefile -print`" ];
then
	../../src/expat-2.0.1/configure --prefix=$ES_SDK --host=i386-pc-es --target=i386-pc-es
	make
	estatus=$?
	[ $estatus != 0 ] && exit $estatus
	make installlib
	estatus=$?
	[ $estatus != 0 ] && exit $estatus
fi
cd ../..

# Fontconfig
cd src
if [ ! -f fontconfig-2.4.2.tar.gz ]; 
then
	wget http://fontconfig.org/release/fontconfig-2.4.2.tar.gz
	[ $? != 0 ] && manual_input "wget http" "fontconfig-2.4.2.tar.gz"
fi
rm -rf fontconfig-2.4.2
tar -zxf fontconfig-2.4.2.tar.gz
patch -p0 -d . < ../trunk/patches/fontconfig-2.4.2.patch
cd ../opt
mkdir -p fontconfig
cd fontconfig
if [ ! -f Makefile ] || [ -n "`find ../../trunk/patches/fontconfig-2.4.2.patch -newer Makefile -print`" ];
then
	../../src/fontconfig-2.4.2/configure --prefix=$ES_SDK --host=i386-pc-es --target=i386-pc-es --with-arch=i386-pc-es --with-expat-includes=$ES_SDK/include --with-expat-lib=$ES_SDK/lib --with-freetype-config=$ES_SDK/bin/es-freetype-config --with-default-fonts=/file/fonts --with-cache-dir=/file --with-confdir=/file --program-prefix=es-
	make
	estatus=$?
	[ $estatus != 0 ] && exit $estatus
	make install  # Ignore an error for this
fi
cd ../..

# zlib
cd opt
mkdir -p zlib
cd zlib
if [ ! -f Makefile ];
then
	../../src/gcc-4.6.1/zlib/configure --prefix=$ES_SDK --host=i386-pc-es --target=i386-pc-es --disable-multilib
	make 
	estatus=$?
	[ $estatus != 0 ] && exit $estatus
	make install
	estatus=$?
	[ $estatus != 0 ] && exit $estatus
fi
cd ../..

# Libpng
cd src
if [ ! -f libpng-1.5.10.tar.gz ]; 
then
	wget ftp://ftp.simplesystems.org/pub/png/src/libpng-1.5.10.tar.gz
	[ $? != 0 ] && manual_input "wget ftp" "libpng-1.5.10.tar.gz"
fi
rm -rf libpng-1.5.10
tar -zxf libpng-1.5.10.tar.gz
cd ../opt
mkdir -p libpng
cd libpng
if [ ! -f Makefile ];
then
	../../src/libpng-1.5.10/configure --prefix=$ES_SDK --host=i386-pc-es --target=i386-pc-es --enable-static --disable-shared LDFLAGS=-L$ES_SDK/lib CFLAGS=-I$ES_SDK/include
	make 
	estatus=$?
	[ $estatus != 0 ] && exit $estatus
	make install
	estatus=$?
	[ $estatus != 0 ] && exit $estatus
fi
cd ../..

# Libjpeg
cd src
if [ ! -f jpegsrc.v7.tar.gz ]; 
then
	wget http://www.ijg.org/files/jpegsrc.v7.tar.gz
	[ $? != 0 ] && manual_input "wget http" "jpegsrc.v7.tar.gz"
fi
rm -rf jpeg-7
tar -zxf jpegsrc.v7.tar.gz
patch -p0 -d . < ../trunk/patches/jpegsrc.v7.patch
cd ../opt
mkdir -p libjpeg
cd libjpeg
if [ ! -f Makefile ] || [ -n "`find ../../trunk/patches/jpegsrc.v7.patch -newer Makefile -print`" ];
then
	../../src/jpeg-7/configure --prefix=$ES_SDK --host=i386-pc-es --target=i386-pc-es --disable-shared --with-gnu-ld
	make 
	estatus=$?
	[ $estatus != 0 ] && exit $estatus
	make install
	estatus=$?
	[ $estatus != 0 ] && exit $estatus
fi
cd ../..

# Libxml2
cd src
if [ ! -f libxml2-2.7.3.tar.gz ]; 
then
	wget ftp://xmlsoft.org/libxml2/libxml2-2.7.3.tar.gz
	[ $? != 0 ] && manual_input "wget ftp" "libxml2-2.7.3.tar.gz"
fi
rm -rf libxml2-2.7.3
tar -zxf libxml2-2.7.3.tar.gz
patch -p0 -d . < ../trunk/patches/libxml2-2.7.3.patch
cd ../opt
mkdir -p libxml2
cd libxml2
if [ ! -f Makefile ] || [ -n "`find ../../trunk/patches/libxml2-2.7.3.patch -newer Makefile -print`" ];
then
        ../../src/libxml2-2.7.3/configure --prefix=$ES_SDK --host=i386-pc-es --target=i386-pc-es --disable-shared --with-gnu-ld --without-debug --without-ftp --without-http  --without-python --program-prefix=es-
	make 
	estatus=$?
	[ $estatus != 0 ] && exit $estatus
	make install
	estatus=$?
	[ $estatus != 0 ] && exit $estatus
fi
cd ../..

# Pixman
cd src
if [ ! -f pixman-0.22.2.tar.gz ]; 
then
	wget http://cairographics.org/releases/pixman-0.22.2.tar.gz
	[ $? != 0 ] && manual_input "wget http" "pixman-0.22.2.tar.gz"
fi
rm -rf pixman-0.22.2
tar -zxf pixman-0.22.2.tar.gz
patch -p0 -d . < ../trunk/patches/pixman-0.22.2.patch
cd ../opt
mkdir -p pixman
cd pixman
if [ ! -f Makefile ] || [ -n "`find ../../trunk/patches/pixman-0.22.2.patch -newer Makefile -print`" ];
then
	../../src/pixman-0.22.2/configure --prefix=$ES_SDK --host=i386-pc-es --target=i386-pc-es --disable-gtk --disable-sse2 --disable-mmx
	make 
	estatus=$?
	[ $estatus != 0 ] && exit $estatus
	make install
	estatus=$?
	[ $estatus != 0 ] && exit $estatus
fi
cd ../..

# Cairo
cd src
if [ ! -f cairo-1.8.6.tar.gz ]; 
then
	wget http://cairographics.org/releases/cairo-1.8.6.tar.gz
	[ $? != 0 ] && manual_input "wget http" "cairo-1.8.6.tar.gz"
fi
rm -rf cairo-1.8.6
tar -zxf cairo-1.8.6.tar.gz
patch -p0 -d . < ../trunk/patches/cairo-1.8.6.patch
cd ../opt
mkdir -p cairo
cd cairo
if [ ! -f Makefile ] || [ -n "`find ../../trunk/patches/cairo-1.8.6.patch -newer Makefile -print`" ];
then
	../../src/cairo-1.8.6/configure --prefix=$ES_SDK --host=i386-pc-es --target=i386-pc-es --disable-xlib --disable-ps --disable-svg --enable-pdf=no FREETYPE_CFLAGS="-I$ES_SDK/include/freetype2 -I$ES_SDK/include" FREETYPE_LIBS="-L$ES_SDK/lib -lfreetype" FONTCONFIG_CFLAGS=-I$ES_SDK/include FONTCONFIG_LIBS="-L$ES_SDK/lib -lfontconfig" pixman_CFLAGS="-I$ES_SDK/include/pixman-1 -I$ES_SDK/include" pixman_LIBS="-L$ES_SDK/lib -lpixman-1" png_CFLAGS="-I$ES_SDK/include/libpng12 -I$ES_SDK/include" png_LIBS="-L$ES_SDK/lib -lz -lpng -lpng12"
	make
	estatus=$?
	[ $estatus != 0 ] && exit $estatus
	make install
	estatus=$?
	[ $estatus != 0 ] && exit $estatus
        rm $ES_SDK/bin/libpng12-config $ES_SDK/bin/libpng-config
fi
cd ../..

# ICU
if [ ! -f src/icu4c-4_2_1-src.tgz ]; 
then
	cd src
	wget http://download.icu-project.org/files/icu4c/4.2.1/icu4c-4_2_1-src.tgz
	[ $? != 0 ] && manual_input "wget http" "icu4c-4_2_1-src.tgz"
	cd ..
fi
if [ ! -d src/icu ] || [ ! -f opt/icu/Makefile ] || [ -n "`find trunk/patches/icu-4.2.1.patch -newer opt/icu/Makefile -print`" ];
then
	cd src
	rm -rf icu
	tar -zxf icu4c-4_2_1-src.tgz
	patch -p0 -d . < ../trunk/patches/icu-4.2.1.patch
	cd icu/source
	./runConfigureICU Linux --with-library-bits=32 --disable-shared --disable-release --disable-debug --enable-static --with-data-packaging=common
	make
	cd ../../..
fi
cd opt
mkdir -p icu
cd icu
if [ ! -f Makefile ] || [ -n "`find ../../trunk/patches/icu-4.2.1.patch -newer Makefile -print`" ];
then
         ../../src/icu/source/configure --prefix=$ES_SDK --host=i386-pc-es --target=i386-pc-es --with-cross-build=$ES_SDK/../src/icu/source --disable-shared --disable-release --disable-debug --enable-static --with-data-packaging=common
        make
	estatus=$?
	[ $estatus != 0 ] && exit $estatus
        make install
	estatus=$?
	[ $estatus != 0 ] && exit $estatus
        rm $ES_SDK/bin/icu-config
fi
cd ../..

# ES operating system for PC
if [ ! -d pc ]; 
then
	mkdir pc
	cd pc
	CFLAGS=-g CXXFLAGS=-g ../trunk/configure --prefix=$ES_SDK --host=i386-pc-es --target=i386-pc-es
else
	cd pc
fi
make
estatus=$?
[ $estatus != 0 ] && exit $estatus
make install
estatus=$?
[ $estatus != 0 ] && exit $estatus
cd ..

# Generate ES boot disk image
cd pc/init/
./es

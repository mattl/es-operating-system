#!/bin/bash -v

dist_dir=$(expr substr $0 1 $(expr $(expr length $0) - 5))

# Check prerequisites
if which yum 
then
	sudo yum install subversion autoconf automake patch bison flex gcc-c++ glibc pcre-devel qemu freeglut-devel cairo-devel libX11-devel libXmu-devel libXi-devel sazanami-fonts-mincho sazanami-fonts-gothic gmp-devel mpfr-devel
elif which apt-get
then
	sudo apt-get install subversion autoconf automake patch texinfo bison flex gcc libc6-dev g++ libpcre3-dev qemu libcairo2-dev libX11-dev libxmu-dev libxi-dev ttf-liberation ttf-sazanami-mincho ttf-sazanami-gothic freeglut3-dev libmpfr-dev
else
	echo 'Your OS is probably not a supported development environment.'
	exit
fi

if [ -z "$ES_SDK" ];
then
export ES_SDK=`pwd`/sdk
fi

mkdir -p $ES_SDK
mkdir -p src
mkdir -p opt
export PATH=$ES_SDK/bin:$PATH

if [ -e $dist_dir/configure ];
then
	# Setup from the distribution
	if [ ! -e trunk ];
	then
		ln -s $dist_dir trunk
	fi
elif [ ! -d trunk ]; 
then 
	# Check out the source code from Google Code
	mkdir trunk
	if [ -z $GOOGLE_USERNAME ]; 
	then
		svn checkout http://es-operating-system.googlecode.com/svn/trunk/ trunk
	else
		svn checkout https://es-operating-system.googlecode.com/svn/trunk/ trunk --username $GOOGLE_USERNAME
	fi
	for i in trunk trunk/esidl trunk/tools trunk/os trunk/init trunk/cmd trunk/esjs
	do 
		(cd $i; aclocal; autoconf; automake -a --foreign)
	done
else
	cd trunk
	svn update
	cd ..
fi

# Building development tools
if [ ! -d local ]; 
then
	mkdir local
	cd local
	CFLAGS=-g CXXFLAGS=-g ../trunk/configure --prefix=$ES_SDK --libdir=$ES_SDK/lib.local
else
	cd local
fi
make
make install-exec
cd ..

# Binutils
if [ ! -f src/binutils-2.19.tar.bz2 ];
then
	cd src
	wget ftp://ftp.gnu.org/gnu/binutils/binutils-2.19.tar.bz2
	cd ..
fi
if [ ! -d src/binutils-2.19 ] || [ ! -f opt/binutils/Makefile ] || [ -n "`find trunk/patches/binutils-2.19.patch -newer opt/binutils/Makefile -print`" ];
then
	cd src
	rm -rf binutils-2.19
	tar -jxf binutils-2.19.tar.bz2
	patch -p0 -d . < ../trunk/patches/binutils-2.19.patch
	cd ..
fi
cd opt
mkdir -p binutils
cd binutils
if [ ! -f Makefile ] || [ -n "`find ../../trunk/patches/binutils-2.19.patch -newer Makefile -print`" ];
then
	../../src/binutils-2.19/configure --target=i386-pc-es --prefix=$ES_SDK
	make
	make install
fi
cd ../..

# GCC and Newlib
if [ ! -f src/gcc-4.3.1.tar.bz2 ]; 
then
	cd src
	wget ftp://ftp.gnu.org/gnu/gcc/gcc-4.3.1/gcc-4.3.1.tar.bz2
	cd ..
fi
if [ ! -d src/gcc-4.3.1 ] || [ ! -f opt/gcc/Makefile ] || [ -n "`find trunk/patches/gcc-4.3.1.patch -newer opt/gcc/Makefile -print`" ];
then
	cd src
	rm -rf gcc-4.3.1
	tar -jxf gcc-4.3.1.tar.bz2
	patch -p0 -d . < ../trunk/patches/gcc-4.3.1.patch
	cd ..
fi
if [ ! -f src/newlib-1.16.0.tar.gz ]; 
then
	cd src
	wget ftp://sources.redhat.com/pub/newlib/newlib-1.16.0.tar.gz
	cd ..
fi
if [ ! -d src/newlib-1.16.0 ] || [ ! -f opt/gcc/Makefile ] || [ -n "`find trunk/patches/newlib-1.16.0.patch -newer opt/gcc/Makefile -print`" ];
then
	cd src
	rm -rf newlib-1.16.0
	tar -zxf newlib-1.16.0.tar.gz
	patch -p0 -d . < ../trunk/patches/newlib-1.16.0.patch
	cd ..
fi
cd src/gcc-4.3.1
ln -fs ../newlib-1.16.0/newlib .
ln -fs ../newlib-1.16.0/libgloss .
cd ../../opt
mkdir -p gcc
cd gcc
if [ ! -f Makefile ] || [ -n "`find ../../trunk/patches/gcc-4.3.1.patch -newer Makefile -print`" ] || [ -n "`find ../../trunk/patches/newlib-1.16.0.patch -newer Makefile -print`" ];
then
	../../src/gcc-4.3.1/configure --target=i386-pc-es --enable-threads --enable-languages=c,c++ --with-gnu-as --with-gnu-ld --with-newlib --with-gmp=/usr --with-mpfr=/usr --disable-shared --prefix=$ES_SDK
	make
	make install
fi
cd ../..

# PCRE
cd src
if [ ! -f pcre-7.8.tar.bz2 ]; 
then
	wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-7.8.tar.bz2
fi
rm -rf pcre-7.8
tar -jxf pcre-7.8.tar.bz2
patch -p0 -d . < ../trunk/patches/pcre-7.8.patch
cd ../opt
mkdir -p pcre
cd pcre
if [ ! -f Makefile ] || [ -n "`find ../../trunk/patches/pcre-7.8.patch -newer Makefile -print`" ];
then
	../../src/pcre-7.8/configure --prefix=$ES_SDK --disable-shared --enable-utf8 --enable-unicode-properties --host=i386-pc-es --target=i386-pc-es
	make
	make install
fi
cd ../..

# FreeType 2
cd src
if [ ! -f freetype-2.3.5.tar.bz2 ]; 
then
	wget http://ftp.twaren.net/Unix/NonGNU/freetype/freetype-2.3.5.tar.bz2
fi
rm -rf freetype-2.3.5
tar -jxf freetype-2.3.5.tar.bz2
patch -p0 -d . < ../trunk/patches/freetype-2.3.5.patch
cd ../opt
mkdir -p freetype
cd freetype
if [ ! -f Makefile ] || [ -n "`find ../../trunk/patches/freetype-2.3.5.patch -newer Makefile -print`" ];
then
	../../src/freetype-2.3.5/configure --prefix=$ES_SDK --host=i386-pc-es --target=i386-pc-es
	make FTSYS_SRC=../../src/freetype-2.3.5/builds/unix/ftsystem.c
	make install
fi
cd ../..

# Expat
cd src
if [ ! -f expat-2.0.1.tar.gz ]; 
then
	wget http://superb-west.dl.sourceforge.net/sourceforge/expat/expat-2.0.1.tar.gz
fi
rm -rf expat-2.0.1
tar -zxf expat-2.0.1.tar.gz
patch -p0 -d . < ../trunk/patches/expat-2.0.1.patch
cd ../opt
mkdir -p expat
cd expat
if [ ! -f Makefile ] || [ -n "`find ../../trunk/patches/expat-2.0.1.patch -newer Makefile -print`" ];
then
	../../src/expat-2.0.1/configure --prefix=$ES_SDK --host=i386-pc-es --target=i386-pc-es
	make
	make installlib
fi
cd ../..

# Fontconfig
cd src
if [ ! -f fontconfig-2.4.2.tar.gz ]; 
then
	wget http://fontconfig.org/release/fontconfig-2.4.2.tar.gz
fi
rm -rf fontconfig-2.4.2
tar -zxf fontconfig-2.4.2.tar.gz
patch -p0 -d . < ../trunk/patches/fontconfig-2.4.2.patch
cd ../opt
mkdir -p fontconfig
cd fontconfig
if [ ! -f Makefile ] || [ -n "`find ../../trunk/patches/fontconfig-2.4.2.patch -newer Makefile -print`" ];
then
	../../src/fontconfig-2.4.2/configure --prefix=$ES_SDK --host=i386-pc-es --target=i386-pc-es --with-arch=i386-pc-es --with-expat-includes=$ES_SDK/include --with-expat-lib=$ES_SDK/lib --with-freetype-config=$ES_SDK/bin/freetype-config --with-default-fonts=/file/fonts --with-cache-dir=/file --with-confdir=/file
	make
	make install
fi
cd ../..

# Libjpeg
cd src
if [ ! -f jpegsrc.v6b.tar.gz ]; 
then
	wget http://www.ijg.org/files/jpegsrc.v6b.tar.gz
fi
rm -rf jpeg-6b
tar -zxf jpegsrc.v6b.tar.gz
patch -p0 -d . < ../trunk/patches/jpegsrc.v6b.patch
cd ../opt
mkdir -p libjpeg
cd libjpeg
if [ ! -f Makefile ] || [ -n "`find ../../trunk/patches/jpegsrc.v6b.patch -newer Makefile -print`" ];
then
	../../src/jpeg-6b/configure --prefix=$ES_SDK --host=i386-pc-es --target=i386-pc-es
	make 
	make install
fi
cd ../..

# Libxml2
cd src
if [ ! -f libxml2-2.7.3.tar.gz ]; 
then
	wget ftp://xmlsoft.org/libxml2/libxml2-2.7.3.tar.gz
fi
rm -rf libxml2-2.7.3
tar -zxf libxml2-2.7.3.tar.gz
patch -p0 -d . < ../trunk/patches/libxml2-2.7.3.patch
cd ../opt
mkdir -p libxml2
cd libxml2
if [ ! -f Makefile ] || [ -n "`find ../../trunk/patches/libxml2-2.7.3.patch -newer Makefile -print`" ];
then
        ../../src/libxml2-2.7.3/configure --prefix=$ES_SDK --build=i386-pc-es --target=i386-pc-es --disable-shared --with-gnu-ld --without-debug
	make 
	make install
fi
cd ../..

# Pixman
cd src
if [ ! -f pixman-0.15.10.tar.gz ]; 
then
	wget http://cairographics.org/releases/pixman-0.15.10.tar.gz
fi
rm -rf pixman-0.15.10
tar -zxf pixman-0.15.10.tar.gz
patch -p0 -d . < ../trunk/patches/pixman-0.15.10.patch
cd ../opt
mkdir -p pixman
cd pixman
if [ ! -f Makefile ] || [ -n "`find ../../trunk/patches/pixman-0.15.10.patch -newer Makefile -print`" ];
then
	../../src/pixman-0.15.10/configure --prefix=$ES_SDK --host=i386-pc-es --target=i386-pc-es --disable-gtk --disable-sse2 --disable-mmx
	make 
	make install
fi
cd ../..

# Cairo
cd src
if [ ! -f cairo-1.8.6.tar.gz ]; 
then
	wget http://cairographics.org/releases/cairo-1.8.6.tar.gz
fi
rm -rf cairo-1.8.6
tar -zxf cairo-1.8.6.tar.gz
patch -p0 -d . < ../trunk/patches/cairo-1.8.6.patch
cd ../opt
mkdir -p cairo
cd cairo
if [ ! -f Makefile ] || [ -n "`find ../../trunk/patches/cairo-1.8.6.patch -newer Makefile -print`" ];
then
	../../src/cairo-1.8.6/configure --prefix=$ES_SDK --host=i386-pc-es --target=i386-pc-es --disable-png --disable-xlib --disable-ps --disable-svg --enable-pdf=no FREETYPE_CFLAGS="-I$ES_SDK/include/freetype2 -I$ES_SDK/include" FREETYPE_LIBS="-L$ES_SDK/lib -lfreetype" FONTCONFIG_CFLAGS=-I$ES_SDK/include FONTCONFIG_LIBS="-L$ES_SDK/lib -lfontconfig" pixman_CFLAGS="-I$ES_SDK/include/pixman-1 -I$ES_SDK/include" pixman_LIBS="-L$ES_SDK/lib -lpixman-1"
	make
	make install
fi
cd ../..

# ES operating system for PC
if [ ! -d pc ]; 
then
	mkdir pc
	cd pc
	CFLAGS=-g CXXFLAGS=-g ../trunk/configure --prefix=$ES_SDK --host=i386-pc-es --target=i386-pc-es
else
	cd pc
fi
make
make install
cd ..

# Generate ES boot disk image
cd pc/init/
./es


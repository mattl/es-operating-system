module test {

[Constructor(DOMString type, optional EventInit dict)]
interface Event {
  attribute DOMString type;
  readonly attribute DOMString color;
};

dictionary EventInit {
  DOMString color;
};

dictionary CustomEventInit : EventInit {
  any detail;
};

interface EventTarget {
  const unsigned short ELEMENT_NODE = 1;
  const unsigned short ATTRIBUTE_NODE = 2; // historical
  const unsigned short TEXT_NODE = 3;
  const unsigned short CDATA_SECTION_NODE = 4; // historical
  const unsigned short ENTITY_REFERENCE_NODE = 5; // historical
  const unsigned short ENTITY_NODE = 6; // historical
  const unsigned short PROCESSING_INSTRUCTION_NODE = 7;
  const unsigned short COMMENT_NODE = 8;
  const unsigned short DOCUMENT_NODE = 9;
  const unsigned short DOCUMENT_TYPE_NODE = 10;
  const unsigned short DOCUMENT_FRAGMENT_NODE = 11;
  const unsigned short NOTATION_NODE = 12; // historical
  void addEventListener(DOMString type, EventListener listener);
  void removeEventListener(DOMString type, EventListener listener);
  boolean dispatchEvent(Event event);

  readonly attribute DOMStringMap dataset;
  readonly attribute HTMLCollection collection;
  stringifier readonly attribute DOMString name;

  void overloaded(DOMStringMap map);
  void overloaded(HTMLCollection collection);
};

[Callback] interface EventListener {
  void handleEvent(Event event);
};

interface DOMStringMap {
  getter DOMString (in DOMString name);
  setter void (in DOMString name, in DOMString value);
  creator void (in DOMString name, in DOMString value);
  deleter void (in DOMString name);
};

interface HTMLCollection {
  readonly attribute unsigned long length;
  legacycaller getter object item(in unsigned long index);
  legacycaller getter object namedItem(in DOMString name);
};

};

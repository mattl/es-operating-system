/*
 * indexeddb.idl
 *
 * Indexed Database API
 *
 * Original W3C Editor's Draft 15 April 2010:
 *
 *   http://dev.w3.org/2006/webapi/WebSimpleDB/
 */

module indexeddb {

typedef dom::DOMStringList DOMStringList;
typedef events::EventTarget EventTarget;
typedef html::Function Function;
typedef html::Window Window;
typedef workers::WorkerUtils WorkerUtils;

interface IDBObjectStore {
    const unsigned short READ_WRITE = 0;
    const unsigned short READ_ONLY = 1;
    const unsigned short SNAPSHOT_READ = 2;
    readonly attribute unsigned short mode;
    readonly attribute DOMString      name;
    readonly attribute DOMString      keyPath;
    readonly attribute DOMStringList  indexNames;
};


interface IDBIndex {
    readonly attribute DOMString name;
    readonly attribute DOMString storeName;
    readonly attribute DOMString keyPath;
    readonly attribute boolean   unique;
};


interface IDBDatabase {
    readonly attribute DOMString      name;
    readonly attribute DOMString      description;
    readonly attribute DOMString      version;
    readonly attribute DOMStringList  objectStores;
    readonly attribute DOMStringList  indexes;
    readonly attribute IDBTransaction currentTransaction;
};


interface IDBKeyRange {
    const unsigned short SINGLE = 0;
    const unsigned short LEFT_OPEN = 1;
    const unsigned short RIGHT_OPEN = 2;
    const unsigned short LEFT_BOUND = 4;
    const unsigned short RIGHT_BOUND = 8;
    readonly attribute any            left;
    readonly attribute any            right;
    readonly attribute unsigned short flags;
    IDBKeyRange only (in any value);
    IDBKeyRange leftBound (in any bound, in optional boolean open);
    IDBKeyRange rightBound (in any bound, in optional boolean open);
    IDBKeyRange bound (in any left, in any right, in optional boolean openLeft, in optional boolean openRight);
};


interface IDBCursor {
    const unsigned short NEXT = 0;
    const unsigned short NEXT_NO_DUPLICATE = 1;
    const unsigned short PREV = 2;
    const unsigned short PREV_NO_DUPLICATE = 3;
    readonly attribute unsigned short direction;
};


interface IDBTransaction {
    attribute boolean     static;
    attribute IDBDatabase db;
};


WorkerUtils implements IDBEnvironmentSync;

interface IDBEnvironmentSync {
    readonly attribute IndexedDatabase indexedDB;
};


interface IndexedDatabase {
    IDBDatabaseSync open (in DOMString name, in DOMString description, in optional boolean modifyDatabase) raises (IDBDatabaseException);
};


interface IDBDatabaseSync : IDBDatabase {
    IDBObjectStoreSync createObjectStore (in DOMString name, in DOMString? keyPath, in optional boolean autoIncrement) raises (IDBDatabaseException);
    IDBObjectStoreSync openObjectStore (in DOMString name, in optional unsigned short mode) raises (IDBDatabaseException);
    IDBIndexSync       createIndex (in DOMString name, in DOMString storeName, in DOMString keyPath, in optional boolean unique) raises (IDBDatabaseException);
    IDBIndexSync       openIndex (in DOMString name) raises (IDBDatabaseException);
    void               removeObjectStore (in DOMString storeName) raises (IDBDatabaseException);
    void               removeIndex (in DOMString indexName) raises (IDBDatabaseException);
    void               setVersion ([TreatNullAs=EmptyString] in DOMString version);
    IDBTransactionSync transaction (in optional DOMStringList storeNames, in optional unsigned long timeout) raises (IDBDatabaseException);
};


interface IDBObjectStoreSync : IDBObjectStore {
    any           put (in any value, in optional any key, in optional boolean noOverwrite) raises (IDBDatabaseException);
    void          remove (in any key) raises (IDBDatabaseException);
    any           get (in any key) raises (IDBDatabaseException);
    IDBCursorSync openCursor (in optional IDBKeyRange range, in optional unsigned short direction) raises (IDBDatabaseException);
};


interface IDBIndexSync {
    void openObjectCursor (in optional IDBKeyRange range, in optional unsigned short direction) raises (IDBDatabaseException);
    void openCursor (in optional IDBKeyRange range, in optional unsigned short direction) raises (IDBDatabaseException);
    any  put (in any value, in optional any key, in optional boolean noOverwrite) raises (IDBDatabaseException);
    any  getObject (in any key) raises (IDBDatabaseException);
    any  get (in any key) raises (IDBDatabaseException);
    void remove (in any key) raises (IDBDatabaseException);
};


interface IDBCursorSync : IDBCursor {
    readonly attribute any                key;
             attribute any                value setraises (IDBDatabaseException);
    readonly attribute unsigned long long count;
    boolean continue (in optional any key);
    void    remove () raises (IDBDatabaseException);
};


interface IDBTransactionSync : IDBTransaction {
    void abort () raises (IDBDatabaseException);
    void commit () raises (IDBDatabaseException);
};


exception IDBDatabaseException {
    const unsigned short UNKNOWN_ERR = 0;
    const unsigned short NON_TRANSIENT_ERR = 1;
    const unsigned short NOT_FOUND_ERR = 2;
    const unsigned short CONSTRAINT_ERR = 3;
    const unsigned short DATA_ERR = 4;
    const unsigned short NOT_ALLOWED_ERR = 5;
    const unsigned short SERIAL_ERR = 11;
    const unsigned short RECOVERABLE_ERR = 21;
    const unsigned short TRANSIENT_ERR = 31;
    const unsigned short TIMEOUT_ERR = 32;
    const unsigned short DEADLOCK_ERR = 33;
    unsigned short code;
    // attribute DOMString      message;
};


interface IDBRequest {
    void abort ();
    const unsigned short INITIAL = 0;
    const unsigned short LOADING = 1;
    const unsigned short DONE = 2;
    readonly attribute unsigned short   readyState;
    readonly attribute IDBDatabaseError error;
    readonly attribute any              result;
             attribute Function         onsuccess;
             attribute Function         onerror;
};


IDBRequest implements EventTarget;

Window implements IDBEnvironment;

interface IDBEnvironment {
    readonly attribute IndexedDatabaseRequest indexedDB;
};


interface IndexedDatabaseRequest {
    readonly attribute IDBRequest request;
    void open (in DOMString name, in DOMString description, in optional boolean modifyDatabase) raises (IDBDatabaseException);
};


interface IDBDatabaseRequest : IDBDatabase {
    readonly attribute IDBRequest request;
    void createObjectStore (in DOMString name, [TreatNullAs=EmptyString] in DOMString keyPath, in optional boolean autoIncrement);
    void openObjectStore (in DOMString name, in optional unsigned short mode);
    void createIndex (in DOMString name, in DOMString storeName, in DOMString keyPath, in optional boolean unique);
    void openIndex (in DOMString name);
    void removeObjectStore (in DOMString storeName);
    void removeIndex (in DOMString indexName);
    void setVersion ([TreatNullAs=EmptyString] in DOMString version);
    void openTransaction (in optional DOMStringList storeNames, in optional unsigned long timeout);
};


interface IDBObjectStoreRequest : IDBObjectStore {
    readonly attribute IDBRequest request;
    void put (in any value, in optional any key, in optional boolean noOverwrite);
    void remove (in any key);
    void get (in any key);
    void openCursor (in optional IDBKeyRange range, in optional unsigned short direction);
};


interface IDBIndexRequest : IDBIndex {
    readonly attribute IDBRequest request;
    void openObjectCursor (in optional IDBKeyRange range, in optional unsigned short direction);
    void openCursor (in optional IDBKeyRange range, in optional unsigned short direction);
    void put (in any value, in optional any key, in optional boolean noOverwrite);
    void getObject (in any key);
    void get (in any key);
    void remove (in any key);
};


interface IDBCursorRequest : IDBCursor {
    readonly attribute IDBRequest         request;
    readonly attribute any                key;
    readonly attribute any                value;
    readonly attribute unsigned long long count;
    void update (in any value);
    void continue (in optional any key);
    void remove ();
};


interface IDBTransactionRequest : IDBTransaction {
    readonly attribute IDBRequest request;
    void abort ();
    void commit ();
};


interface IDBDatabaseError {
    attribute unsigned short code;
    attribute DOMString      message;
};

};

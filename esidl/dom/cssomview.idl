/*
 * cssomview.idl
 *
 * CSSOM View IDL definitions scraped from the W3C specification, revised for esidl.
 * Note the CSSOM View Module supercedes DOM Level 2 Views (dom2views.idl)
 *
 * Original W3C Working Draft:
 *
 *   http://www.w3.org/TR/2009/WD-cssom-view-20090804/
 */

module views 
{

typedef dom::Document Document;
typedef dom::Element Element;
typedef events::MouseEvent MouseEvent;
typedef ranges::Range Range;

[NoInterfaceObject] interface AbstractView {
  readonly attribute DocumentView document;
  readonly attribute Media media;
};

interface Media {
  readonly attribute DOMString type;
  boolean matchMedium(DOMString mediaquery);
};

[NoInterfaceObject] interface ScreenView : AbstractView {
  // viewport
  readonly attribute long innerWidth;
  readonly attribute long innerHeight;
  readonly attribute long pageXOffset;
  readonly attribute long pageYOffset;
  void scroll(long x, long y);
  void scrollTo(long x, long y);
  void scrollBy(long x, long y);

  // client
  readonly attribute long screenX;
  readonly attribute long screenY;
  readonly attribute long outerWidth;
  readonly attribute long outerHeight;

  // output device
  readonly attribute Screen screen;
};

interface Screen {
  readonly attribute unsigned long availWidth;
  readonly attribute unsigned long availHeight;
  readonly attribute unsigned long width;
  readonly attribute unsigned long height;
  readonly attribute unsigned long colorDepth;
  readonly attribute unsigned long pixelDepth;
};

[NoInterfaceObject] interface DocumentView {
  readonly attribute AbstractView defaultView;
  Element elementFromPoint(float x, float y);
  Range caretRangeFromPoint(float x, float y);
};

Document implements DocumentView;

interface ClientRectList {
  readonly attribute unsigned long length;
  getter ClientRect item(unsigned long index);
};

interface ClientRect {
  readonly attribute float top;
  readonly attribute float right;
  readonly attribute float bottom;
  readonly attribute float left;
  readonly attribute float width;
  readonly attribute float height;
};

};

module dom 
{

typedef views::ClientRectList ClientRectList;
typedef views::ClientRect ClientRect;

[Supplemental] interface Element {
  ClientRectList getClientRects();
  ClientRect getBoundingClientRect();

           attribute long scrollTop;   // scroll on setting
           attribute long scrollLeft;  // scroll on setting
  readonly attribute long scrollWidth;
  readonly attribute long scrollHeight;

  readonly attribute long clientTop;
  readonly attribute long clientLeft;
  readonly attribute long clientWidth;
  readonly attribute long clientHeight;
};

};

module html
{

[Supplemental] interface HTMLElement {
  readonly attribute Element offsetParent;
  readonly attribute long offsetTop;
  readonly attribute long offsetLeft;
  readonly attribute long offsetWidth;
  readonly attribute long offsetHeight;
};

};

module ranges
{

typedef views::ClientRectList ClientRectList;
typedef views::ClientRect ClientRect;

[Supplemental] interface Range {
  ClientRectList getClientRects();
  ClientRect getBoundingClientRect();
};

};

module events
{

[Supplemental] interface MouseEvent {
  // readonly attribute long screenX;
  // readonly attribute long screenY;

  readonly attribute long pageX;
  readonly attribute long pageY;

  // readonly attribute long clientX;
  // readonly attribute long clientY;
  readonly attribute long x;
  readonly attribute long y;

  readonly attribute long offsetX;
  readonly attribute long offsetY;
};

};


/*
 * dom3events.idl
 *
 * Document Object Model (DOM) Level 3 Events Specification, revised for esidl.
 *
 * Original W3C Editor's Draft 15 April 2010:
 *
 *   http://dev.w3.org/2006/webapi/DOM-Level-3-Events/html/DOM3-Events.html?rev=1.129
 */

module events {

typedef dom::DOMObject DOMObject;
typedef dom::Document Document;
typedef dom::DOMTimeStamp DOMTimeStamp;
typedef dom::Node Node;
typedef dom::DOMException DOMException;

// Introduced in DOM Level 2:
[PrototypeRoot]
interface Event {

  // PhaseType
  const unsigned short               CAPTURING_PHASE      = 1;
  const unsigned short               AT_TARGET            = 2;
  const unsigned short               BUBBLING_PHASE       = 3;

  readonly attribute DOMString       type;
  readonly attribute EventTarget     target;
  readonly attribute EventTarget     currentTarget;
  readonly attribute unsigned short  eventPhase;
  readonly attribute boolean         bubbles;
  readonly attribute boolean         cancelable;
  readonly attribute DOMTimeStamp    timeStamp;
  void                               stopPropagation();
  void                               preventDefault();
  void                               initEvent(in DOMString eventTypeArg, 
                                               in boolean canBubbleArg, 
                                               in boolean cancelableArg);
  // Introduced in DOM Level 3:
  void                               stopImmediatePropagation();
  // Introduced in DOM Level 3:
  readonly attribute boolean         defaultPrevented;
  // Introduced in DOM Level 3:
  readonly attribute boolean         trusted;
};
                


// Introduced in DOM Level 3:
interface CustomEvent : Event {
  readonly attribute DOMObject         detail;
  void               initCustomEvent(in DOMString typeArg, 
                                     in boolean canBubbleArg, 
                                     in boolean cancelableArg, 
                                     in DOMObject detailArg);
};
                


// Introduced in DOM Level 2:
interface EventTarget {
  void               addEventListener(in DOMString type, 
                                      in EventListener listener, 
                                      in boolean useCapture);
  void               removeEventListener(in DOMString type, 
                                         in EventListener listener, 
                                         in boolean useCapture);
  // Modified in DOM Level 3:
  boolean            dispatchEvent(in Event evt)
                                   raises(EventException, 
                                   DOMException);
                                   
};
                
Node implements EventTarget;



// Introduced in DOM Level 2:
[Callback]
interface EventListener {
  void               handleEvent(in Event evt);
};
                


// Introduced in DOM Level 2:
exception EventException {
  // EventExceptionCode
  const unsigned short      UNSPECIFIED_EVENT_TYPE_ERR     = 0;
  // Introduced in DOM Level 3:
  const unsigned short      DISPATCH_REQUEST_ERR           = 1;

  unsigned short          code;
};



// Introduced in DOM Level 2:
interface DocumentEvent {
  // Modified in DOM Level 3:
  Event                     createEvent(in DOMString eventInterface)
                                        raises(DOMException);
};

Document implements DocumentEvent;
                  


// Introduced in DOM Level 2:
interface UIEvent : Event {
  readonly attribute views::AbstractView view;
  readonly attribute long            detail;
  void                               initUIEvent(in DOMString typeArg, 
                                                 in boolean canBubbleArg, 
                                                 in boolean cancelableArg, 
                                                 in views::AbstractView viewArg, 
                                                 in long detailArg);
};
                


// Introduced in DOM Level 3:
interface FocusEvent : UIEvent {
  readonly attribute EventTarget   relatedTarget;
  void                             initFocusEvent(in DOMString typeArg, 
                                                  in boolean canBubbleArg, 
                                                  in boolean cancelableArg, 
                                                  in views::AbstractView viewArg, 
                                                  in long detailArg, 
                                                  in EventTarget relatedTargetArg);
};
              


// Modified in DOM Level 3:
interface MouseEvent : UIEvent {
  readonly attribute long            screenX;
  readonly attribute long            screenY;
  readonly attribute long            clientX;
  readonly attribute long            clientY;
  readonly attribute boolean         ctrlKey;
  readonly attribute boolean         shiftKey;
  readonly attribute boolean         altKey;
  readonly attribute boolean         metaKey;
  readonly attribute unsigned short  button;  
  readonly attribute unsigned short  buttons;
  readonly attribute                 EventTarget     relatedTarget;
  void                               initMouseEvent(in DOMString typeArg, 
                                                in boolean canBubbleArg, 
                                                in boolean cancelableArg, 
                                                in views::AbstractView viewArg, 
                                                in long detailArg, 
                                                in long screenXArg, 
                                                in long screenYArg, 
                                                in long clientXArg, 
                                                in long clientYArg, 
                                                in boolean ctrlKeyArg, 
                                                in boolean altKeyArg, 
                                                in boolean shiftKeyArg, 
                                                in boolean metaKeyArg, 
                                                in unsigned short buttonArg, 
                                                in unsigned short buttonsArg, 
                                                in EventTarget relatedTargetArg);
  // Introduced in DOM Level 3:
  boolean                            getModifierState(in DOMString keyArg);
};
              


// Introduced in DOM Level 3:
interface WheelEvent : MouseEvent {

  // DeltaModeCode
  const unsigned long                DOM_DELTA_PIXEL       = 0x00;
  const unsigned long                DOM_DELTA_LINE        = 0x01;
  const unsigned long                DOM_DELTA_PAGE        = 0x02;

  readonly attribute long            deltaX;
  readonly attribute long            deltaY;
  readonly attribute long            deltaZ;
  readonly attribute unsigned long   deltaMode;    
  void                               initWheelEvent(in DOMString typeArg, 
                                                    in boolean canBubbleArg, 
                                                    in boolean cancelableArg, 
                                                    in views::AbstractView viewArg, 
                                                    in long detailArg, 
                                                    in long screenXArg, 
                                                    in long screenYArg, 
                                                    in long clientXArg, 
                                                    in long clientYArg, 
                                                    in unsigned short buttonArg, 
                                                    in EventTarget relatedTargetArg, 
                                                    in DOMString modifiersListArg, 
                                                    in long deltaXArg, 
                                                    in long deltaYArg, 
                                                    in long deltaZArg, 
                                                    in unsigned long deltaMode);
};
              


// Introduced in DOM Level 3:
interface TextEvent : UIEvent {

  // InputModeCode
  const unsigned long                DOM_INPUT_METHOD_UNKNOWN       = 0x00;
  const unsigned long                DOM_INPUT_METHOD_KEYBOARD      = 0x01;
  const unsigned long                DOM_INPUT_METHOD_PASTE         = 0x02;
  const unsigned long                DOM_INPUT_METHOD_DROP          = 0x03;
  const unsigned long                DOM_INPUT_METHOD_IME           = 0x04;
  const unsigned long                DOM_INPUT_METHOD_OPTION        = 0x05;
  const unsigned long                DOM_INPUT_METHOD_HANDWRITING   = 0x06;
  const unsigned long                DOM_INPUT_METHOD_VOICE         = 0x07;
  const unsigned long                DOM_INPUT_METHOD_MULTIMODAL    = 0x08;
  const unsigned long                DOM_INPUT_METHOD_SCRIPT        = 0x09;

  readonly attribute DOMString       data;
  readonly attribute unsigned long   inputMode;  
  void                               initTextEvent(in DOMString typeArg, 
                                                   in boolean canBubbleArg, 
                                                   in boolean cancelableArg, 
                                                   in views::AbstractView viewArg, 
                                                   in DOMString dataArg, 
                                                   in unsigned long inputMode);
};
                


// Introduced in DOM Level 3:
interface KeyboardEvent : UIEvent {

  // KeyLocationCode
  const unsigned long                DOM_KEY_LOCATION_STANDARD      = 0x00;
  const unsigned long                DOM_KEY_LOCATION_LEFT          = 0x01;
  const unsigned long                DOM_KEY_LOCATION_RIGHT         = 0x02;
  const unsigned long                DOM_KEY_LOCATION_NUMPAD        = 0x03;
  const unsigned long                DOM_KEY_LOCATION_MOBILE        = 0x04;
  const unsigned long                DOM_KEY_LOCATION_JOYSTICK      = 0x05;

  readonly attribute DOMString       key;
  readonly attribute unsigned long   location;
  readonly attribute boolean         ctrlKey;
  readonly attribute boolean         shiftKey;
  readonly attribute boolean         altKey;
  readonly attribute boolean         metaKey;
  readonly attribute boolean         repeat;
  boolean                            getModifierState(in DOMString keyArg);
  void                               initKeyboardEvent(in DOMString typeArg, 
                                                       in boolean canBubbleArg, 
                                                       in boolean cancelableArg, 
                                                       in views::AbstractView viewArg, 
                                                       in DOMString keyArg, 
                                                       in unsigned long locationArg, 
                                                       in DOMString modifiersListArg,
                                                       in boolean repeat);
};
                


// Introduced in DOM Level 3:
interface CompositionEvent : UIEvent {
  readonly attribute DOMString       data;
  void                               initCompositionEvent(in DOMString typeArg, 
                                                          in boolean canBubbleArg, 
                                                          in boolean cancelableArg, 
                                                          in views::AbstractView viewArg, 
                                                          in DOMString dataArg);
};
                


// Introduced in DOM Level 2:
interface MutationEvent : Event {

  // attrChangeType
  const unsigned short      MODIFICATION                   = 1;
  const unsigned short      ADDITION                       = 2;
  const unsigned short      REMOVAL                        = 3;

  readonly attribute Node            relatedNode;
  readonly attribute DOMString?      prevValue;
  readonly attribute DOMString?      newValue;
  readonly attribute DOMString?      attrName;
  readonly attribute unsigned short  attrChange;
  void               initMutationEvent(in DOMString typeArg, 
                                       in boolean canBubbleArg, 
                                       in boolean cancelableArg, 
                                       in Node relatedNodeArg, 
                                       in DOMString? prevValueArg, 
                                       in DOMString? newValueArg, 
                                       in DOMString? attrNameArg, 
                                       in unsigned short attrChangeArg);
};
                


// Introduced in DOM Level 3:
interface MutationNameEvent : MutationEvent {
  readonly attribute DOMString       prevNamespaceURI;
  readonly attribute DOMString       prevNodeName;
  // Introduced in DOM Level 3:
  void                               initMutationNameEvent(in DOMString typeArg, 
                                                           in boolean canBubbleArg, 
                                                           in boolean cancelableArg, 
                                                           in Node relatedNodeArg, 
                                                           in DOMString prevNamespaceURIArg, 
                                                           in DOMString prevNodeNameArg);
};
                
};
